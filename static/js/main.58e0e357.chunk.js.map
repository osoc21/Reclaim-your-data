{"version":3,"sources":["pod.js","Login.js","GridView.js","FileExplorer.js","FileUpload.js","rdf.js","Profile.js","Contacts.js","Albums.js","ContactDetails.js","BottomNavBar.js","MenuBar.js","Notification.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["tempPodPattern","getPODUrlFromWebId","webId","match","Login","props","setLoggedIn","setWebId","setPodUrl","session","a","handleIncomingRedirect","getDefaultSession","info","isLoggedIn","newPodUrl","handleRedirectAfterLogin","className","Button","size","variant","color","onClick","login","oidcIssuer","redirectUrl","window","location","href","clientName","GridView","files","setLoadingAnim","openFolder","useState","entries","setEntries","loadedImagesCounter","currentPath","useRef","nbImages","isFolder","url","endsWith","isImage","getName","length","sortByDate","sort","b","date","processedEntries","entry","processedEntry","shortName","imageUrl","push","fetchImageData","getFile","fetch","raw","URL","createObjectURL","Response","arrayBuffer","exifData","exif","readFromBinaryFile","dateTime","DateTime","replace","undefined","Date","latitude","longitude","updateLoadingAnim","current","useEffect","getEntriesFromFiles","ImageList","rowHeight","cols","map","folderEntry","index","idx","ImageListItem","onLoad","loading","src","alt","renderEntry","FileExplorer","POD_URL","podUrl","setFiles","explorerPath","setCurrentPath","setExplorerPath","getFilesFromResourceURL","getSolidDataset","fetchedFiles","getThingAll","children","res","slice","then","fileArray","getRootFiles","Container","id","disableGutters","FileUpload","selectedFiles","setSelectedFiles","setNotifMsg","setNotifType","upload","promiseArray","file","placeFileInContainer","Promise","all","promiseResults","errorMsg","i","name","updateMetadataFile","makeMetaDataEntry","fileUrl","makeMetadataFile","jsObjects","jsonString","JSON","stringify","File","type","contentToAdd","Array","from","metadataFile","text","fileContent","prevContent","parse","newContent","resContent","newMetadataFile","overwriteFile","slug","contentType","targetContainerURL","saveFileInContainer","selectedFilesToReact","document","querySelector","click","startIcon","endIcon","multiple","accept","onChange","e","target","queryEngine","newEngine","require","executeQuery","query","sources","comunicaSources","sourceFile","store","Store","method","response","textStream","headers","get","console","log","resolve","reject","rdfParser","split","baseIRI","on","quad","addQuad","error","value","result","bindings","metadata","getEmailCardUrlQuery","getEmailFromEmailCardUrlQuery","Profile","WEB_ID","username","setUsername","role","setRole","email","setEmail","useSession","parseSingleResult","profileDocumentURI","myDataset","profile","getThing","parsedUsername","getStringNoLocale","VCARD","fn","parsedRole","parsedEmail","resBindings","parsedEmailCardUrl","showField","field","getProfileData","getContactsBasicInfoQuery","Contacts","gotoScreen","podURL","setBindings","getContactsBasicInfoSource","Contact","binding","turtleFileUrl","fetchContacts","Albums","getWebIdFromPersonFileQuery","getRoleQuery","ContactDetails","contactUsername","realProps","params","contactPersonFileUrl","urlHiddenParams","contactWebId","setContactWebId","contactPodUrl","setContactPodUrl","parsedWebId","newContactPodUrl","getContactDetailsFromPersonFile","BottomNavBar","classes","btnClass","bottomNavBtn","setLocation","handleChange","event","newValue","BottomNavigation","appBar","showLabels","style","position","width","bottom","BottomNavigationAction","label","icon","MenuBar","AppBar","Toolbar","Typography","IconButton","topBarRightElem","edge","Notification","notifMsg","notifType","Collapse","overflowY","in","Alert","severity","action","fontSize","Home","loadingAnim","setUrlHiddenParams","history","screenPath","hiddenParams","updateHiddenParamsBefore","CircularProgress","zIndex","opacity","top","showLoadingAnimation","exact","path","render","useStyles","makeStyles","fab","right","marginLeft","background","App","loggedIn","useHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.58e0e357.chunk.js","sourcesContent":["const tempPodPattern = /https:\\/\\/(\\w+\\.)solidweb.org\\/|https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\//;\n\nfunction getPODUrlFromWebId(webId) {\n    return webId.match(tempPodPattern)[0];\n}\n\nexport {getPODUrlFromWebId};\nexport default getPODUrlFromWebId;","import \"./Login.css\";\nimport {getPODUrlFromWebId} from './pod';\nimport React from \"react\";\nimport {Button} from '@material-ui/core';\nimport {\n  login,\n  handleIncomingRedirect,\n  getDefaultSession,\n} from '@inrupt/solid-client-authn-browser';\n\nfunction Login(props) {\n\tlet setLoggedIn = props.setLoggedIn;\n\tlet setWebId = props.setWebId;\n\tlet setPodUrl = props.setPodUrl;\n\n\tlet session = null;\n\n\t// 1a. Start Login Process. Call login() function.\n\tfunction loginToInruptDotCom() {\n\t  let chosenIssuer = \"https://broker.pod.inrupt.com\";\n\t  return login({\n\t    oidcIssuer: chosenIssuer,\n\t    redirectUrl: window.location.href,\n\t    clientName: \"Getting started app\"\n\t  });\n\t}\n\n\t// 1b. Login Redirect. Call handleIncomingRedirect() function.\n\t// When redirected after login, finish the process by retrieving session information.\n\tasync function handleRedirectAfterLogin() {\n\t  await handleIncomingRedirect();\n\n\t  session = getDefaultSession();\n\n\t  if (session.info.isLoggedIn) {\n\t    // Update the page with the status.\n\t    await setLoggedIn(true);\n\t    await setWebId(session.info.webId);\n\t    let newPodUrl = getPODUrlFromWebId(session.info.webId);\n\t    await setPodUrl(newPodUrl);\n\t  }\n\t}\n\n\thandleRedirectAfterLogin();\n\n\treturn (\n\t\t<div className=\"login-frame\">\n\t    \t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={loginToInruptDotCom}>Log-in</Button>\n    \t</div>\n\t);\n}\n\n\nexport default Login;","import React, {useEffect, useState, useRef} from \"react\";\nimport {fetch} from '@inrupt/solid-client-authn-browser';\nimport {getFile} from '@inrupt/solid-client';\nimport {ImageList, ImageListItem} from '@material-ui/core';\nimport dms2dec from \"dms2dec\";\nimport \"./GridView.css\";\nimport exif from 'exif-js';\n\nfunction GridView(props) {\n    let files = props.files;\n    let openFolder = props.openFolder;\n    let setLoadingAnim = props.setLoadingAnim;\n    const [entries, setEntries] = useState([]);\n    let currentPath = props.currentPath;\n    let loadedImagesCounter = useRef(0);\n    let nbImages = useRef(0);\n\n    useEffect(() => {\n        nbImages.current = 0;\n        loadedImagesCounter.current = 0;\n        // here we use props prefix, otherwise setLoadingAnim is not recognized\n        getEntriesFromFiles(files);\n    }, [files]);\n\n    function isFolder(url) {\n        return url.endsWith(\"/\");\n    }\n\n    function isImage(url) {\n        return url.endsWith(\".jpg\") || url.endsWith(\".jpeg\") || url.endsWith(\".png\");\n    }\n\n    function getName(url) {\n        let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n        const match = url.match(regex);\n        return match[match.length - 1];\n    }\n\n    function sortByDate(files) {\n        return files.sort((a, b) => b.date - a.date);\n    }\n\n    async function getEntriesFromFiles(files) {\n        let processedEntries = [];\n\n        for (const entry of files) {\n            let processedEntry = {\n                url: entry.url,\n                shortName: getName(entry.url),\n                isFolder: isFolder(entry.url),\n                imageUrl: null,\n                date: null\n            };\n\n            processedEntries.push(processedEntry);\n        }\n        await fetchImageData(processedEntries);\n        await setEntries(processedEntries);\n        sortByDate(processedEntries);\n    }\n\n    async function fetchImageData(processedEntries) {\n        for (const entry of processedEntries) {\n            if (isImage(entry.url)) {\n                let raw = await getFile(entry.url, {fetch: fetch});\n                entry.imageUrl = URL.createObjectURL(raw);\n\n                let arrayBuffer = await new Response(raw).arrayBuffer();\n                let exifData = exif.readFromBinaryFile(arrayBuffer);\n                if (exifData) {\n                    let dateTime = exifData.DateTime ? exifData.DateTime.replace(\":\", \"/\").replace(\":\", \"/\") : undefined\n                    //let latitude = exifData.GPSLatitude && exifData.GPSLatitude[0] ? exifData.GPSLatitude : null\n                    //let longitude = exifData.GPSLongitude && exifData.GPSLongitude[0] ? exifData.GPSLongitude : null\n                    //console.log(`exifdata`);\n                    //console.log(dateTime);\n                    entry.date = new Date(dateTime);\n                    if (exifData.latitude != null && exifData.longitude != null) {\n                        // note: the dms2dec lib expects 4 parameters, but we haven't found a way to parse if the picture\n                        // was taken in the NESW direction, so at the moment it's hardcoded\n                        // TODO: extract NESW direction from EXIF data\n                        //console.log(dms2dec(exifData.latitude, \"N\", exifData.longitude, \"E\"));\n                    }\n                }\n                // sortByDate(processedEntries);\n            }\n        }\n    }\n\n    /** If called with a counter of loaded images higher than the size of the entries array,\n     * stops the loading animation. */\n    function updateLoadingAnim() {\n        loadedImagesCounter.current += 1;\n        if (loadedImagesCounter >= nbImages) {\n            setLoadingAnim(false);\n        }\n    }\n\n    function renderEntry(folderEntry, idx) {\n        if ((!folderEntry.isFolder) && folderEntry.imageUrl) {\n            return (<ImageListItem key={idx}>\n                <img onLoad={updateLoadingAnim} loading=\"lazy\" src={folderEntry.imageUrl} alt={folderEntry.imageUrl}/>\n            </ImageListItem>);\n        }\n        return null;\n    }\n\n    return (\n        <div className=\"grid-view\">\n            <ImageList rowHeight={160} cols={4}>\n                {entries.map((folderEntry, index) => renderEntry(folderEntry, index))}\n            </ImageList>\n        </div>\n    );\n}\n\nexport default GridView;","import React, {useEffect, useState} from \"react\";\nimport GridView from \"./GridView\";\nimport \"./FileExplorer.css\"\nimport {fetch} from '@inrupt/solid-client-authn-browser';\nimport {getSolidDataset, getThingAll} from '@inrupt/solid-client';\nimport {Container} from '@material-ui/core';\n\nfunction FileExplorer(props) {\n    const POD_URL = props.podUrl;\n\n    let [files, setFiles] = useState([]);\n\n    let setLoadingAnim = props.setLoadingAnim;\n    let currentPath = props.explorerPath;\n    let setCurrentPath = props.setExplorerPath;\n\n    function openFolder(url) {\n        setLoadingAnim(true);\n        // its important to set the current path first !!\n        getFilesFromResourceURL(url).then((fileArray) => {\n            setCurrentPath(url);\n            setFiles(fileArray);\n            setLoadingAnim(false);\n        });\n    }\n\n\n    async function getFilesFromResourceURL(url) {\n        const fetchedFiles = await getSolidDataset(url, {fetch: fetch});\n        let children = await getThingAll(fetchedFiles);\n\n        let res = []\n\n        // note: the first child element is self\n        if (children.length > 1) {\n            res = children.slice(1, children.length)\n        }\n\n        return res;\n    }\n\n\n    /** Fetch all files from the given path given relative to the root */\n    async function getRootFiles() {\n        await setLoadingAnim(true);\n        getFilesFromResourceURL(POD_URL).then((fileArray) => {\n            setCurrentPath(POD_URL);\n            setFiles(fileArray);\n        });\n    }\n\n    useEffect(() => {\n        if (POD_URL !== \"\") {\n            getRootFiles();\n        }\n    }, [POD_URL]);\n\n\n    return (\n        <Container id=\"file-explorer\" disableGutters=\"true\">\n            <GridView files={files} openFolder={openFolder} setLoadingAnim={setLoadingAnim} currentPath={currentPath}/>\n        </Container>\n    );\n}\n\nexport default FileExplorer;\n","import \"./FileUpload.css\"\nimport React, {useState} from \"react\"\nimport {\n    saveFileInContainer,\n    getFile,\n    overwriteFile\n} from '@inrupt/solid-client';\n\nimport {\n    fetch\n} from '@inrupt/solid-client-authn-browser';\n\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SendIcon from '@material-ui/icons/Send';\n\n\nfunction FileUpload(props) {\n    let currentPath = props.explorerPath;\n    let [selectedFiles, setSelectedFiles] = useState([]);\n    let setNotifMsg = props.setNotifMsg;\n    let setNotifType = props.setNotifType;\n    let setLoadingAnim = props.setLoadingAnim;\n\n    async function upload() {\n        let promiseArray = [];\n        await setLoadingAnim(true);\n\n        for (let file of selectedFiles) {\n            promiseArray.push(placeFileInContainer(file, currentPath));\n        }\n        let promiseResults = await Promise.all(promiseArray);\n        let errorMsg = \"\";\n\n        for (let i = 0; i < promiseResults.length; ++i) {\n            let res = promiseResults[i];\n\n            // promise is undefined if the upload wasn't sucessful\n            if (!res) {\n                errorMsg += \"'\" + selectedFiles[i].name + \"'\";\n            }\n\n        }\n        await setLoadingAnim(false);\n\n        // there is an error or more\n        if (errorMsg !== \"\") {\n            await setNotifType(\"error\");\n            await setNotifMsg(\"Could not upload file(s). The file(s) might already exist: \" + errorMsg);\n        } else if (selectedFiles.length > 0) {\n            await setNotifType(\"success\");\n            await setNotifMsg(\"Files successfully uploaded !!\");\n            await updateMetadataFile(selectedFiles);\n        } else if (selectedFiles.length === 0) {\n            await setNotifType(\"info\");\n            await setNotifMsg(\"Nothing to upload.\");\n        }\n    }\n\n    function makeMetaDataEntry(file) {\n        function getName(url) {\n            let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n            const match = url.match(regex);\n            return match[match.length - 1];\n        }\n\n        function isFolder(url) {\n            return url.endsWith(\"/\");\n        }\n\n        let fileUrl = currentPath + file.name;\n        let metadataEntry = {\n            url: fileUrl,\n            shortName: getName(fileUrl),\n            isFolder: isFolder(fileUrl),\n            imageUrl: null,\n            date: null\n        };\n        return metadataEntry;\n    }\n\n    function makeMetadataFile(jsObjects) {\n        const jsonString = `${JSON.stringify(jsObjects)}`;\n        return new File([jsonString], \"metadata.json\", {\n            type: \"application/json\"\n        });\n    }\n\n    async function updateMetadataFile(contentToAdd) {\n        let processedEntries = Array.from(contentToAdd).map(entry => makeMetaDataEntry(entry));\n        let metadataFile = makeMetadataFile(processedEntries);\n        let file = await getFile(currentPath + metadataFile.name, {fetch: fetch});\n        let fileContent = await file.text();\n\n        const prevContent = JSON.parse(fileContent);\n        const newContent = [...prevContent, ...processedEntries];\n        const resContent = await Promise.all(newContent);\n        const newMetadataFile = makeMetadataFile(resContent);\n        const savedFile = await overwriteFile(\n            currentPath + newMetadataFile.name,\n            newMetadataFile,\n            {\n                slug: newMetadataFile.name,\n                contentType: newMetadataFile.type,\n                fetch: fetch\n            });\n    }\n\n    /**\n     * Upload file into the targetContainer.\n     * @param  {[type]} file               [description]\n     * @param  {[type]} targetContainerURL [description]\n     * @return {[type]}                    [description]\n     */\n    async function placeFileInContainer(file, targetContainerURL) {\n        try {\n            const savedFile = await saveFileInContainer(\n                targetContainerURL,           // Container URL\n                file,                         // File\n                {\n                    slug: file.name,\n                    contentType: file.type, fetch: fetch\n                }\n            );\n            return file.name;\n        } catch (error) {\n            //console.log(\"ERROR CAUGHT:\", error);\n            // Any error is handled in the UI, no need to print it to the console.\n        }\n    }\n\n    function openFileSelectionWindow() {\n        document.querySelector(\"#file-input\").click();\n    }\n\n    function selectedFilesToReact() {\n        let res = [];\n        let i = 0;\n        // selectedFiles is iterable but not an array, \n        // so map() and forEach() functions don't work\n        for (let file of selectedFiles) {\n            res.push(<li key={i}>{file.name}</li>);\n            ++i;\n        }\n\n        return res;\n    }\n\n    function showUploadSection() {\n        return (\n            <div className=\"upload-section\">\n                <h4>Selected files:</h4>\n                <ul>{selectedFilesToReact()}</ul>\n                <Button variant=\"contained\" color=\"primary\" onClick={upload}\n                        endIcon={<SendIcon/>}>Upload</Button>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Upload files</h1>\n            <h4>Destination:</h4>\n            <p>{currentPath}</p>\n            <Button variant=\"contained\" color=\"primary\" onClick={openFileSelectionWindow}\n                    startIcon={<CloudUploadIcon/>}>\n                Select file(s)\n            </Button>\n            {selectedFiles.length > 0 ? showUploadSection() : null}\n            <input id=\"file-input\" type=\"file\" multiple=\"multiple\"\n                   name=\"fileUploadInput\"\n                   className=\"file-selection\"\n                   accept=\"image/*\"\n                   onChange={(e) => {\n                       setSelectedFiles(e.target.files);\n                   }}/>\n        </div>\n    );\n}\n\nexport default FileUpload;\n","import { React } from \"react\";\nimport rdfParser from \"rdf-parse\";\nimport { Store } from \"n3\";\n\nconst newEngine = require('@comunica/actor-init-sparql').newEngine;\nconst queryEngine = newEngine();\n\nfunction printBindings(binding) {\n    const boundVariables = binding['_root'].entries.map(e => e[0]);\n    for (let variable of boundVariables){\n        console.log(variable, \" | \" ,binding.get(variable).value);\n    }\n}\n\n\nasync function executeQuery (query, sources, session) {\n    const comunicaSources = [];\n\n    for (let sourceFile of sources) {\n        const store = new Store();\n        const response = await session.fetch(sourceFile, { method: 'get' });\n        const textStream = require('streamify-string')(await response.text());\n        const contentType = response.headers.get('Content-Type');\n        console.log(\"Content type:\", contentType);\n        // const strippedUrl = sourceFile.split(\"#\")[0];\n        await new Promise((resolve, reject) => {\n            rdfParser.parse(textStream, { contentType: contentType.split(';')[0], baseIRI: sourceFile })\n            .on('data', (quad) => { console.log('QUAD', quad, store); store.addQuad(quad) })\n            .on('error', (error) => reject(error))\n            .on('end', async () => {resolve()})\n        });\n        comunicaSources.push({ type: 'rdfjsSource', value: store });\n    }\n\n    const result = await queryEngine.query(query, {sources: comunicaSources});\n\n    // Consume results as an array (easier)\n    const bindings = await result.bindings();\n\n    // Log metadata containing source-level provenance information\n    const metadata = await result.metadata();\n    console.log(metadata)\n\n    return bindings;\n}\n\n\nexport  {printBindings, executeQuery};","\nimport React, {useState, useEffect}from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport {useSession} from \"@inrupt/solid-ui-react\";\nimport { VCARD, SCHEMA_INRUPT } from \"@inrupt/vocab-common-rdf\";\nimport { fetch } from \"@inrupt/solid-client-authn-browser\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  getSolidDataset,\n  getThing,\n  getStringNoLocale,\n  getUrlAll\n} from \"@inrupt/solid-client\";\n\nconst getRoleQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#role> ?o }\";\nconst getPODProviderUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/ns/solid/terms#oidcIssuer> ?o }\";\nconst getEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#hasEmail> ?o }\";\n// using email card url\nconst getEmailFromEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n\n\nfunction Profile(props)\n{\n\tconst WEB_ID = props.webId;\n\tconst POD_URL = props.podUrl;\n\tlet [username, setUsername] = useState(\"\"); //data.public;\n\tlet [role, setRole] = useState(\"\");\n\tlet [email, setEmail] = useState(\"\");\n\n\tconst { session } = useSession();\n\n\tuseEffect(() => {\n\t\tgetProfileData();\n\t}, [POD_URL]);\n\n\tfunction parseSingleResult(bindings)\n\t{\n\t\treturn bindings[0]['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\t}\n\n\tasync function getProfileData()\n\t{\n\t\tconst profileDocumentURI = WEB_ID.split('#')[0];\n\n\t\t// Use `getSolidDataset` to get the Profile document.\n\t\t// Profile document is public and can be read w/o authentication; i.e.: \n\t\t// - You can either omit `fetch` or \n\t\t// - You can pass in `fetch` with or without logging in first. \n\t\t//   If logged in, the `fetch` is authenticated.\n\t\t// For illustrative purposes, the `fetch` is passed in.\n\t\tconst myDataset = await getSolidDataset(profileDocumentURI, { fetch: session.fetch });\n\n\t\tconsole.log(\"dataset:\", myDataset);\n\t\t// Get the Profile data from the retrieved SolidDataset\n\t\tconst profile = getThing(myDataset, WEB_ID);\n\t\tconsole.log(\"profile:\", profile);\n\t\t// Get the formatted name using `VCARD.fn` convenience object.\n\t\t// `VCARD.fn` includes the identifier string \"http://www.w3.org/2006/vcard/ns#fn\".\n\t\t// As an alternative, you can pass in the \"http://www.w3.org/2006/vcard/ns#fn\" string instead of `VCARD.fn`.\n \n\t\tconst parsedUsername = getStringNoLocale(profile, VCARD.fn);\n\n\t\t// Get the role using `VCARD.role` convenience object.\n\t\t// `VCARD.role` includes the identifier string \"http://www.w3.org/2006/vcard/ns#role\"\n\t\t// As an alternative, you can pass in the \"http://www.w3.org/2006/vcard/ns#role\" string instead of `VCARD.role`.\n\n\t\tconst parsedRole = getStringNoLocale(profile, VCARD.role);\n\n\t\t// let parsedEmail = getUrlAll(profile, SCHEMA_INRUPT.email);\n\t\t// console.log(\"parsed email:\", parsedEmail);\n\t\tlet parsedEmail = null;\n\t\tlet resBindings = await executeQuery(getEmailCardUrlQuery, [WEB_ID], session);\n\t\tconsole.log(\"email card url res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t\t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t\t\tconsole.log(\"email res:\", resBindings);\n\t\t\tif (resBindings.length > 0)\n\t\t\t{\n\t\t\t\tparsedEmail = parseSingleResult(resBindings);\n\t\t\t}\n\t\t}\n\t\tsetUsername(parsedUsername);\n\t\tsetRole(parsedRole);\n\t\tsetEmail(parsedEmail);\n\t\t// return {username: parsedUsername, role: parsedRole};\n\t}\n\n\n\t// async function getDetailsFromWebId()\n\t// {\n\t// \tlet resBindings = await executeQuery(getRoleQuery, [WEB_ID], session);\n\t// \tconsole.log(\"role res:\", resBindings);\n\t// \tif (resBindings.length > 0)\n\t// \t{\n\t// \t\tlet parsedRole = parseSingleResult(resBindings);\n\t// \t\tsetRole(parsedRole);\n\t// \t}\n\t// \tresBindings = await executeQuery(getEmailCardUrlQuery, [WEB_ID], session);\n\t// \tconsole.log(\"email card url res:\", resBindings);\n\t// \tif (resBindings.length > 0)\n\t// \t{\n\t// \t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t// \t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t// \t\tconsole.log(\"email res:\", resBindings);\n\t// \t\tif (resBindings.length > 0)\n\t// \t\t{\n\t// \t\t\tlet parsedEmail = parseSingleResult(resBindings);\n\t// \t\t\tsetEmail(parsedEmail);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tfunction showField(field)\n\t{\n\t\treturn (<p>{field ? field : \"-\"}</p>);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Contact page of {username}</h1>\n\t\t\t<h4>WebId:</h4>\n\t\t\t{showField(WEB_ID)}\n\t\t\t<h4>POD url</h4>\n\t\t\t{showField(POD_URL)}\n\t\t\t<h4>Email:</h4>\n\t\t\t{showField(email)}\n\t\t\t<h4>Role</h4>\n\t\t\t{showField(role)}\n\t\t</>\n\t);\n}\n\nexport default Profile;","import {useState, React, useEffect} from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport \"./Contacts.css\";\nimport {useSession} from \"@inrupt/solid-ui-react\";\nimport PersonIcon from '@material-ui/icons/Person';\n\nconst getContactsBasicInfoQuery = \"SELECT ?s ?o WHERE {?s <http://www.w3.org/2006/vcard/ns#fn> ?o}\";\n\nfunction Contacts(props) {\n    let webId = props.webId;\n    let gotoScreen = props.gotoScreen;\n    let podURL = props.podUrl;\n\n    const {session} = useSession();\n    const [bindings, setBindings] = useState([]);\n\n\n    async function fetchContacts() {\n        let getContactsBasicInfoSource = podURL + \"contacts/people.ttl#this\";\n        let resBindings = await executeQuery(getContactsBasicInfoQuery, [getContactsBasicInfoSource], session);\n        await setBindings(resBindings);\n    }\n\n    useEffect(() => {\n        fetchContacts();\n    }, [webId]);\n\n    function Contact(props) {\n        let binding = props.binding;\n\n        let username = binding['_root'].entries[1][1]['id'].replace(/['\"]+/g, '');\n        let turtleFileUrl = binding['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\n        return (\n            <div className=\"contact\">\n                <PersonIcon/>\n                <p className=\"contact-name\"\n                   onClick={() => gotoScreen(`/contacts/${username}`, [turtleFileUrl])}>{username}</p>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Contacts</h1>\n            {bindings.map((binding, idx) => {\n                console.log(\"Binding:\", binding);\n                return (<Contact key={idx} binding={binding}/>)\n            })}\n        </div>\n    );\n}\n\nexport default Contacts;","\nimport React from \"react\";\n\n\nfunction Albums(props)\n{\n\treturn (\n\t\t<>\n\t\t\t<h1>Albums</h1>\n\t\t\t<h2>Your albums</h2>\n\t\t\t<p>album1</p>\n\t\t\t<p>album1</p>\n\t\t</>\n\t);\n}\n\nexport default Albums;","import React, {useState, useEffect} from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport {getPODUrlFromWebId} from './pod';\nimport {useSession} from \"@inrupt/solid-ui-react\";\n\n// using person file as source\nconst getWebIdFromPersonFileQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n// using webid as source\nconst getRoleQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#role> ?o }\";\n// const getPODProviderUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/ns/solid/terms#oidcIssuer> ?o }\";\nconst getEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#hasEmail> ?o }\";\n// using email card url\nconst getEmailFromEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n\nfunction ContactDetails(props)\n{\n\tlet contactUsername = props.realProps.match.params.username; //data.public;\n\tlet contactPersonFileUrl = props.urlHiddenParams[0]; //data.hidden;\n\tlet [contactWebId,setContactWebId] = useState(\"\");\n\tlet [contactPodUrl, setContactPodUrl] = useState(\"\");\n\tlet [role, setRole] = useState(\"\");\n\tlet [email, setEmail] = useState(\"\");\n\n\tconst { session } = useSession();\n\n\tfunction parseSingleResult(bindings)\n\t{\n\t\treturn bindings[0]['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\t}\n\n\tasync function getContactDetailsFromPersonFile()\n\t{\n\t\tlet resBindings = await executeQuery(getWebIdFromPersonFileQuery, [contactPersonFileUrl], session);\n\t\tlet parsedWebId = parseSingleResult(resBindings);\n\t\t//console.log(\"parsed contact webid:\", parsedWebId);\n\t\tsetContactWebId(parsedWebId);\n\t\tlet newContactPodUrl =  getPODUrlFromWebId(parsedWebId);\n\t\tsetContactPodUrl(newContactPodUrl);\n\t\tresBindings = await executeQuery(getRoleQuery, [parsedWebId], session);\n\t\t//console.log(\"role res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedRole = parseSingleResult(resBindings);\n\t\t\tsetRole(parsedRole);\n\t\t}\n\t\tresBindings = await executeQuery(getEmailCardUrlQuery, [parsedWebId], session);\n\t\t//console.log(\"email card url res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t\t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t\t\t//console.log(\"email res:\", resBindings);\n\t\t\tif (resBindings.length > 0)\n\t\t\t{\n\t\t\t\tlet parsedEmail = parseSingleResult(resBindings);\n\t\t\t\tsetEmail(parsedEmail);\n\t\t\t}\n\t\t}\n\t\t// let email =\n\t}\n\n\tuseEffect(() => {\n\t\tgetContactDetailsFromPersonFile();\n\t}, [contactPersonFileUrl]);\n\t\n\tfunction showField(field)\n\t{\n\t\treturn (<p>{field ? field : \"-\"}</p>);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Contact page of {contactUsername}</h1>\n\t\t\t<h4>Person file url:</h4>\n\t\t\t{showField(contactPersonFileUrl)}\n\t\t\t<h4>WebId:</h4>\n\t\t\t{showField(contactWebId)}\n\t\t\t<h4>POD url</h4>\n\t\t\t{showField(contactPodUrl)}\n\t\t\t<h4>Email:</h4>\n\t\t\t{showField(email)}\n\t\t\t<h4>Role</h4>\n\t\t\t{showField(role)}\n\t\t</>\n\t);\n}\n\nexport default ContactDetails;","\nimport React, {useState} from \"react\";\nimport {BottomNavigation, BottomNavigationAction} from '@material-ui/core';\nimport PhotoIcon from '@material-ui/icons/Photo';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport GroupIcon from '@material-ui/icons/Group';\n\nfunction BottomNavBar(props) {\n    let classes = props.classes;\n    let btnClass = classes.bottomNavBtn;\n    let gotoScreen = props.gotoScreen;\n    let [location, setLocation] = useState(\"/\");\n\n    // NOTICE: we false as last parameter of gotoScreen, because we consider all the navigation tabs independent\n    // and as such we want hidden parameters to be updated after the screen change to not cause errors\n    const handleChange = async (event, newValue) => {\n        await setLocation(newValue);\n        await gotoScreen(newValue, null, false)\n    };\n\n    return (\n        <BottomNavigation className={classes.appBar} value={location} onChange={handleChange}\n                          showLabels style={{position: 'fixed', width: \"100%\", bottom: 0}}>\n            <BottomNavigationAction className={btnClass} value=\"/\" label=\"Photos\" icon={<PhotoIcon/>}/>\n            <BottomNavigationAction className={btnClass} value=\"/albums\" label=\"Albums\" icon={<FolderIcon/>}/>\n            <BottomNavigationAction className={btnClass} value=\"/profile\" label=\"Profile\" icon={<AccountBoxIcon/>}/>\n            <BottomNavigationAction className={btnClass} value=\"/contacts\" label=\"Contacts\" icon={<GroupIcon/>}/>\n        </BottomNavigation>\n    );\n}\n\nexport default BottomNavBar;","\nimport React from \"react\";\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\n\nfunction MenuBar(props) {\n    let classes = props.classes;\n    let gotoScreen = props.gotoScreen;\n\n    return (\n        <AppBar position=\"sticky\" className={classes.appBar}>\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\">\n                    WePod\n                </Typography>\n                <IconButton style={{color: \"white\"}} className={classes.topBarRightElem} edge=\"start\"\n                            aria-label=\"menu\" onClick={async () => {\n                    await gotoScreen('/upload', null, false)\n                }}>\n                    <AddIcon/>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default MenuBar;","\nimport React from \"react\";\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nfunction Notification(props) {\n    let notifMsg = props.notifMsg;\n    let notifType = props.notifType;\n    let setNotifMsg = props.setNotifMsg;\n\n    return (<Collapse style={{overflowY: \"scroll\"}} in={(notifMsg !== \"\" && notifType !== \"\")}>\n        <Alert severity={notifType} action={\n            <IconButton\n                aria-label=\"close\"\n                color=\"inherit\"\n                size=\"small\"\n                onClick={() => {\n                    setNotifMsg(\"\");\n                }}>\n                <CloseIcon fontSize=\"inherit\"/>\n            </IconButton>}>\n            {notifMsg}\n        </Alert>\n    </Collapse>);\n}\n\nexport default Notification;","\nimport FileExplorer from \"./FileExplorer\";\nimport FileUpload from \"./FileUpload\";\nimport Profile from \"./Profile\";\nimport Contacts from \"./Contacts\";\nimport Albums from \"./Albums\";\nimport ContactDetails from \"./ContactDetails\";\nimport BottomNavBar from \"./BottomNavBar\";\nimport MenuBar from \"./MenuBar\";\nimport Notification from \"./Notification\";\n\nimport React, {useState} from \"react\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { Switch, Route } from \"react-router-dom\";\n\n\nfunction Home(props) {\n    let [notifMsg, setNotifMsg] = useState(\"\");\n    let [notifType, setNotifType] = useState(\"info\");\n    let [loadingAnim, setLoadingAnim] = useState(false); // when first loading, show anim\n    let [urlHiddenParams, setUrlHiddenParams] = useState([]);\n\n    let webId = props.webId;\n    let podUrl = props.podUrl;\n    let explorerPath = props.explorerPath;\n    let setExplorerPath = props.setExplorerPath;\n    let history = props.history;\n\n    const classes = props.classes;\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    async function gotoScreen(screenPath, hiddenParams = null, updateHiddenParamsBefore = true) {\n        // By default, we update the hidden params before redirecting.\n        // This way, the newpage will have the proper parameters set before rendering\n        if (updateHiddenParamsBefore) {\n            await setUrlHiddenParams(hiddenParams);\n        }\n        await setLoadingAnim(false); // always cancel loading anim when switching screen\n        history.push(`${screenPath}`);\n\n        // Some screens rely on hidden params as props, hence they will show an error\n        // if we change the hidden param before changing location (since everything is reference in JS).\n        // In that case, we can avoid the problem by setting updateHiddenParamsBefore to false,\n        // hence updating such prop after the screen change.\n        if (!updateHiddenParamsBefore) {\n            await setUrlHiddenParams(hiddenParams);\n        }\n    }\n\n    function showLoadingAnimation() {\n        if (loadingAnim) {\n            return <CircularProgress color=\"secondary\" size={100}\n                                     style={{zIndex: 1700, opacity: \".7\", position: \"fixed\", top: \"45vh\"}}/>\n        }\n    }\n\n\n    return (<>\n        {showLoadingAnimation()}\n        <MenuBar classes={classes} history={history} gotoScreen={gotoScreen}/>\n        <Notification setNotifMsg={setNotifMsg} notifMsg={notifMsg} notifType={notifType}/>\n        <div className=\"content\">\n            <Switch>\n                <Route exact path=\"/upload\">\n                    <FileUpload explorerPath={explorerPath} setNotifMsg={setNotifMsg}\n                                setNotifType={setNotifType} setLoadingAnim={setLoadingAnim}/>\n                </Route>\n                <Route exact path=\"/profile\">\n                    <Profile webId={webId} podUrl={podUrl}/>\n                </Route>\n                <Route exact path=\"/contacts\">\n                    <Contacts gotoScreen={gotoScreen} podUrl={podUrl}/>\n                </Route>\n                <Route path=\"/contacts/:username\"\n                       render={(props) => <ContactDetails urlHiddenParams={urlHiddenParams} realProps={props}/>}/>\n                <Route exact path=\"/albums\">\n                    <Albums/>\n                </Route>\n                <Route exact path=\"/\">\n                    <FileExplorer podUrl={podUrl} explorerPath={explorerPath}\n                                  setExplorerPath={setExplorerPath} setLoadingAnim={setLoadingAnim}/>\n                </Route>\n            </Switch>\n        </div>\n        <BottomNavBar classes={classes} gotoScreen={gotoScreen}/>\n    </>);\n}\n\nexport default Home;","\nimport './App.css';\nimport Login from \"./Login\";\nimport Home from \"./Home\";\n\nimport React, {useState, useEffect} from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nimport {useHistory} from \"react-router-dom\";\n\n// Style I want for fab, can add more - it's just a JS object\nconst useStyles = makeStyles({\n    fab: {\n        position: \"fixed\",\n        right: \"10px\",\n        bottom: \"10px\",\n    },\n    topBarRightElem: {\n        marginLeft: 'auto',\n    },\n    appBar: {\n        background: 'rgba(0,0,0,0.9)',\n    },\n    bottomNavBtn: {\n        color: \"grey\",\n        \"&$selected\": {\n            color: \"red\"\n        }\n    }\n});\n\n\nfunction App() {\n    let [loggedIn, setLoggedIn] = useState(false);\n    let [webId, setWebId] = useState(\"\");\n    let [podUrl, setPodUrl] = useState(\"\");\n    let [explorerPath, setExplorerPath] = useState(\"\");\n\n    let history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        setExplorerPath(podUrl);\n    }, [podUrl]);\n\n    function isLoggedIn() {\n        return (webId !== \"\") && loggedIn;\n    }\n\n    function getLoginComponent() {\n        return (<Login setWebId={setWebId} setLoggedIn={setLoggedIn} setPodUrl={setPodUrl}/>);\n    }\n\n    function getHomeComponent() {\n        return <Home classes={classes}\n                     webId={webId} podUrl={podUrl}\n                     history={history}\n                     explorerPath={explorerPath}\n                     setExplorerPath={setExplorerPath}/>;\n    }\n\n\n    return (\n        <div className=\"app-div\">\n            {isLoggedIn() ? getHomeComponent() : getLoginComponent()}\n        </div>\n    );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}