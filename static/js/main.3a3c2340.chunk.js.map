{"version":3,"sources":["pod.js","Login.js","GridView.js","FileExplorer.js","FileUpload.js","Profile.js","Contacts.js","Albums.js","App.js","reportWebVitals.js","index.js"],"names":["tempPodPattern","getPODUrlFromWebId","webId","match","Login","props","setLoggedIn","setWebId","setPodUrl","session","a","handleIncomingRedirect","getDefaultSession","info","isLoggedIn","newPodUrl","handleRedirectAfterLogin","className","Button","size","variant","color","onClick","login","oidcIssuer","redirectUrl","window","location","href","clientName","GridView","files","openFolder","setLoadingAnim","useState","entries","setEntries","currentPath","isFolder","url","endsWith","isImage","getName","length","getEntriesFromFiles","processedEntries","entry","processedEntry","shortName","imageUrl","date","push","getExifData","sortByDate","getFile","fetch","raw","URL","createObjectURL","Response","arrayBuffer","exifData","exif","readFromBinaryFile","dateTime","DateTime","replace","undefined","console","log","Date","latitude","longitude","dms2dec","sort","b","file","overwriteFile","name","slug","contentType","type","useEffect","then","uploadMetadataFile","File","ImageList","rowHeight","cols","map","folderEntry","index","idx","ImageListItem","loading","src","alt","renderEntry","FileExplorer","POD_URL","podUrl","setFiles","explorerPath","setCurrentPath","setExplorerPath","getFilesFromResourceURL","fileArray","getSolidDataset","fetchedFiles","getThingAll","children","res","slice","getRootFiles","Container","id","FileUpload","selectedFiles","setSelectedFiles","setNotifMsg","setNotifType","promiseArray","placeFileInContainer","Promise","all","promiseResults","errorMsg","i","targetContainerURL","saveFileInContainer","error","selectedFilesToReact","document","querySelector","click","multiple","accept","onChange","e","target","Profile","Contacts","Albums","useStyles","makeStyles","fab","position","right","bottom","topBarRightElem","marginLeft","appBar","background","bottomNavBtn","MenuBar","history","classes","gotoScreen","AppBar","Toolbar","IconButton","style","edge","BottomNavBar","btnClass","setLocation","BottomNavigation","value","event","newValue","showLabels","width","borderRadius","BottomNavigationAction","label","icon","Home","notifMsg","notifType","loadingAnim","screenPath","Notification","Collapse","overflowY","in","Alert","severity","action","fontSize","CircularProgress","zIndex","showLoadingAnimation","exact","path","App","loggedIn","useHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a3c2340.chunk.js","sourcesContent":["\n\nconst solidwebPattern = \"https:\\/\\/(\\w+\\.)solidweb.org\\/\";\nconst podInruptPattern = \"https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\/\";\nconst tempPodPattern = /https:\\/\\/(\\w+\\.)solidweb.org\\/|https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\//;\n\nfunction getPODUrlFromWebId(webId) \n{\n    return webId.match(tempPodPattern)[0];\n}\n\nexport {getPODUrlFromWebId};\nexport default getPODUrlFromWebId;","\nimport \"./Login.css\";\nimport {getPODUrlFromWebId} from './pod';\n\nimport React from \"react\";\n\nimport {Button} from '@material-ui/core';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n  login,\n  handleIncomingRedirect,\n  getDefaultSession,\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction Login(props) {\n\tlet setLoggedIn = props.setLoggedIn;\n\tlet setWebId = props.setWebId;\n\tlet setPodUrl = props.setPodUrl;\n\n\tlet session = null;\n\n\t// 1a. Start Login Process. Call login() function.\n\tfunction loginToInruptDotCom() {\n\t  let chosenIssuer = \"https://broker.pod.inrupt.com\";\n\t  return login({\n\t    oidcIssuer: chosenIssuer,\n\t    redirectUrl: window.location.href,\n\t    clientName: \"Getting started app\"\n\t  });\n\t}\n\n\t// 1b. Login Redirect. Call handleIncomingRedirect() function.\n\t// When redirected after login, finish the process by retrieving session information.\n\tasync function handleRedirectAfterLogin() {\n\t  await handleIncomingRedirect();\n\n\t  session = getDefaultSession();\n\n\t  if (session.info.isLoggedIn) {\n\t    // Update the page with the status.\n\t    await setLoggedIn(true);\n\t    await setWebId(session.info.webId);\n\t    let newPodUrl = getPODUrlFromWebId(session.info.webId);\n\t    await setPodUrl(newPodUrl);\n\t  }\n\t}\n\n\thandleRedirectAfterLogin();\n\n\treturn (\n\t\t<div className=\"login-frame\">\n\t    \t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={loginToInruptDotCom}>Log-in</Button>\n    \t</div>\n\t);\n}\n\n\nexport default Login;","import React, {useEffect, useState} from \"react\";\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {fetch} from '@inrupt/solid-client-authn-browser';\n\n// Import from \"@inrupt/solid-client\"\nimport {getFile, overwriteFile, saveFileInContainer, deleteFile} from '@inrupt/solid-client';\n\n// import {Shape, Card, Row, Col, CardGroup, Image, Container} from 'react-bootstrap';\nimport {ImageList, ImageListItem} from '@material-ui/core';\n\n\n// import InfoIcon from '@material-ui/icons/Info';\nimport dms2dec from \"dms2dec\";\nimport \"./GridView.css\";\nimport exif from 'exif-js';\n\n\nfunction GridView(props) {\n    let files = props.files;\n    let openFolder = props.openFolder;\n    let setLoadingAnim = props.setLoadingAnim;\n    const [entries, setEntries] = useState([]);\n    let currentPath = props.currentPath;\n    //const [metadataFileExists, setMetadataFileExists] = useState(false);\n\n    useEffect(() => {\n        // here we use props prefix, otherwise setLoadingAnim is not recognized\n        getEntriesFromFiles(files);\n    }, [files]);\n\n    function isFolder(url) {\n        return url.endsWith(\"/\");\n    }\n\n    function isImage(url) {\n        return url.endsWith(\".jpg\") || url.endsWith(\".jpeg\") || url.endsWith(\".png\");\n    }\n\n    function getName(url) {\n        let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n        const match = url.match(regex);\n        return match[match.length - 1];\n    }\n\n    async function getEntriesFromFiles(files) {\n        // console.log(\"Fetching\");\n        // console.log(files);\n        let processedEntries = [];\n\n        for (const entry of files) {\n            // console.log(entry);\n\n            /*\n            if (entry.url.endsWith(\"metadata.json\")) {\n                await setMetadataFileExists(true);\n            }\n            */\n\n            let processedEntry = {\n                url: entry.url,\n                shortName: getName(entry.url),\n                isFolder: isFolder(entry.url),\n                imageUrl: null,\n                date: null\n            };\n\n            processedEntries.push(processedEntry);\n        }\n        await getExifData(processedEntries);\n        await setEntries(processedEntries);\n        sortByDate(processedEntries);\n    }\n\n    async function getExifData(processedEntries) {\n        for (const entry of processedEntries) {\n            if (isImage(entry.url)) {\n                let raw = await getFile(entry.url, {fetch: fetch});\n                entry.imageUrl = URL.createObjectURL(raw);\n\n                let arrayBuffer = await new Response(raw).arrayBuffer();\n                let exifData = exif.readFromBinaryFile(arrayBuffer);\n                if (exifData) {\n                    let dateTime = exifData.DateTime ? exifData.DateTime.replace(\":\", \"/\").replace(\":\", \"/\") : undefined\n                    //let latitude = exifData.GPSLatitude && exifData.GPSLatitude[0] ? exifData.GPSLatitude : null\n                    //let longitude = exifData.GPSLongitude && exifData.GPSLongitude[0] ? exifData.GPSLongitude : null\n                    console.log(`exifdata`);\n                    console.log(dateTime);\n                    entry.date = new Date(dateTime);\n                    if (exifData.latitude != null && exifData.longitude != null) {\n                        // note: the dms2dec lib expects 4 parameters, but we haven't found a way to parse if the picture\n                        // was taken in the NESW direction, so at the moment it's hardcoded\n                        // TODO: extract NESW direction from EXIF data\n                        console.log(dms2dec(exifData.latitude, \"N\", exifData.longitude, \"E\"));\n                    }\n                }\n            }\n        }\n    }\n\n\n    function sortByDate(files) {\n        return files.sort((a, b) => b.date - a.date);\n    }\n\n    function metadataFile() {\n        return new File([\"Lorem Ipsum\"], \"metadata.json\", {\n            type: \"application/json\"\n        });\n    }\n\n    async function updateMedataFile() {\n        //\n    }\n\n    \n    async function uploadMetadataFile(file, url) {\n        console.log(url);\n\n        // TODO: Add check for metadatFileExists here instead\n        let metadataFileExists = false;\n\n        //await checkForMetaDataFile();\n\n        if (url !== \"\") {\n         \n          \n            const savedFile = await overwriteFile(\n                url + file.name,\n                file,\n                {\n                    slug: file.name,\n                    contentType: file.type,\n                    fetch: fetch\n                });\n               \n                console.log(\"overwritten\");\n            \n        }\n    }\n\n    useEffect(() => {\n        getEntriesFromFiles(files).then(() =>\n            uploadMetadataFile(metadataFile(), currentPath));\n        console.log(currentPath);\n       // checkForMetaDataFile();\n    }, [files, currentPath]);\n\n\n    function renderEntry(folderEntry, idx)\n    {\n        if((! folderEntry.isFolder) && folderEntry.imageUrl)\n        {\n            return (<ImageListItem>\n                        <img loading=\"lazy\" src={folderEntry.imageUrl} alt={folderEntry.imageUrl}/>\n                    </ImageListItem>);\n        }\n        return null;\n    }\n\n\n    return (\n        <div className=\"grid-view\">\n            <ImageList rowHeight={160} cols={4}>\n                {entries.map((folderEntry, index) => renderEntry(folderEntry, index))}\n            </ImageList>\n        </div>\n    );\n}\n\n\nexport default GridView;","import React, {useEffect, useState} from \"react\";\nimport GridView from \"./GridView\";\nimport \"./FileExplorer.css\"\nimport {fetch} from '@inrupt/solid-client-authn-browser';\n\n// Import from \"@inrupt/solid-client\"\nimport {getSolidDataset, getThingAll, saveFileInContainer} from '@inrupt/solid-client';\n\nimport {Container, Box, Fab} from '@material-ui/core';\n\n// import CircularProgress from '@material-ui/core/CircularProgress';\n\n\nfunction FileExplorer(props) {\n    const POD_URL = props.podUrl;\n\n    let [files, setFiles] = useState([]);\n    \n    let setLoadingAnim = props.setLoadingAnim;\n    let currentPath = props.explorerPath;\n    let setCurrentPath = props.setExplorerPath;\n\n    /*function fileExplorerGoBack() {\n        if (currentPath.length > POD_URL.length && currentPath !== POD_URL) {\n            if (currentPath === \"\") {\n                setCurrentPath(MY_POD_URL);\n            }\n        }\n    }*/\n\n\n    function fileExplorerGoBack() {\n        if (currentPath.length > POD_URL.length && currentPath !== POD_URL) {\n            // find the second-last '/', then keep the substring until that '/'\n            // this gives the new path url\n            let lastSlashPos = currentPath.slice(0, -1).lastIndexOf('/');\n            let newPath = currentPath.slice(0, lastSlashPos + 1)\n\n            openFolder(newPath);\n\n        } else {\n            alert(\"Cannot go back from POD root.\");\n        }\n    }\n\n\n    function resourceLink(itemURL, setCurrentPath, uniqueKey) {\n        let url = itemURL;\n        let resourceName = stripURL(url);\n\n        function open() {\n            if (url.endsWith(\"/\")) {\n                console.log(\"opening \" + url + \" ...\");\n                openFolder(url);\n            } else {\n                alert(\"this is a file, handle it\");\n            }\n        }\n\n        return {\"pathName\": {url}, \"open\": {open}};\n    }\n\n    /** Iteraetes on the file urls and returns an array of react components */\n    function stripURL(url) {\n        //Find the second-last '/', then keep the substring until that '/'\n        // this gives the new path url\n        let searchUpperBound = url.length;\n        if (url.endsWith('/')) {\n            searchUpperBound = url.length - 1\n        }\n        let slashPos = url.slice(0, searchUpperBound).lastIndexOf('/');\n        return url.slice(slashPos + 1, searchUpperBound);\n    }\n\n    function openFolder(url) {\n        setLoadingAnim(true);\n        // its important to set the current path first !!\n        getFilesFromResourceURL(url).then((fileArray) => {\n            setCurrentPath(url);\n            setFiles(fileArray);\n            setLoadingAnim(false);\n        });\n    }\n\n\n    async function getFilesFromResourceURL(url) {\n        console.log(\"url:\", url);\n        const fetchedFiles = await getSolidDataset(url, {fetch: fetch});\n\n        let children = await getThingAll(fetchedFiles);\n\n        let res = []\n\n        // note: the first child element is self\n        if (children.length > 1) {\n            res = children.slice(1, children.length)\n        }\n\n        return res;\n    }\n\n\n    /** Fetch all files from the given path given relative to the root */\n    async function getRootFiles() {\n        await setLoadingAnim(true);\n        getFilesFromResourceURL(POD_URL).then((fileArray) => {\n            setCurrentPath(POD_URL);\n            setFiles(fileArray);\n            setLoadingAnim(false);\n        });\n        \n    }\n\n\n    // only read files if not already in the array (avoid infinite refreshes !!!)\n    // but also if the current path is the root (it's possible that we're not in the\n    // root but the current path contains no file e.g. empty folder)\n    // if ((files.length === 0) && (currentPath === POD_URL))\n    // {\n    //     // Don't use animation here as FileExplorer might already\n    //     // be rendering and updating too many properties\n    //     // at that time might cause 'too many rerenders'\n    //     getRootFiles();\n    // }\n\n    useEffect(() => {\n        if (POD_URL !== \"\") {\n            getRootFiles();\n        }\n    }, [POD_URL]);\n\n\n    return (\n        <Container id=\"file-explorer\">\n            <GridView files={files} openFolder={openFolder} setLoadingAnim={setLoadingAnim} currentPath={currentPath}/>\n        </Container>\n    );\n}\n\nexport default FileExplorer;","import React, {useState} from \"react\"\n\n// Import from \"@inrupt/solid-client\"\nimport {\n    saveFileInContainer\n} from '@inrupt/solid-client';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n    fetch\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction FileUpload(props) {\n    let currentPath = props.explorerPath;\n    let [selectedFiles, setSelectedFiles] = useState([]);\n    let setNotifMsg = props.setNotifMsg;\n    let setNotifType = props.setNotifType;\n    let setLoadingAnim = props.setLoadingAnim;\n\n    async function upload() {\n        let promiseArray = [];\n        await setLoadingAnim(true);\n        console.log(\"uploading ...\");\n        for (let file of selectedFiles) {\n            promiseArray.push(placeFileInContainer(file, currentPath));\n        }\n        let promiseResults = await Promise.all(promiseArray);\n        let errorMsg = \"\";\n        for (let i = 0 ; i < promiseResults.length ; ++i)\n        {\n            let res = promiseResults[i];\n            // console.log(res)\n             \n            // promise is undefined if the upload wasn't sucessful\n            if (! res)\n            {\n                errorMsg += \"Could not upload '\" + selectedFiles[i].name + \"', the file might already exist.\\n\";\n            }\n           \n        }\n        await setLoadingAnim(false);\n        // there is an error or more\n        if (errorMsg !== \"\")\n        {\n            await setNotifType(\"error\");\n            await setNotifMsg(errorMsg);\n        }\n        else\n        {\n            await setNotifType(\"success\");\n            await setNotifMsg(\"Files successfully uploaded !!\");\n        }\n\n\n        //TODO: add success/failure notification of uploading file(s)\n    }\n\n    /**\n     * Upload file into the targetContainer.\n     * @param  {[type]} file               [description]\n     * @param  {[type]} targetContainerURL [description]\n     * @return {[type]}                    [description]\n     */\n    async function placeFileInContainer(file, targetContainerURL) {\n        try {\n            const savedFile = await saveFileInContainer(\n                targetContainerURL,           // Container URL\n                file,                         // File\n                {\n                    slug: file.name, // file.name.split('.')[0]\n                    contentType: file.type, fetch: fetch\n                }\n            );\n            return file.name;\n            // await setNotifType(\"error\");\n            // await setNotifMsg(\"file '\" + file.name + \"' already exists.\");\n        } catch (error) {\n            console.error(\"ERROR CAUGHT:\", error);\n            \n        }\n    }\n\n    function openFileSelectionWindow() {\n        document.querySelector(\"#file-input\").click();\n    }\n\n\n    function selectedFilesToReact() {\n        let res = [];\n\n        // selectedFiles is iterable but not an array, \n        // so map() and forEach() functions don't work\n        for (let file of selectedFiles) {\n            res.push(<li>{file.name}</li>);\n        }\n\n        return res;\n    }\n\n    function showSelectedFiles() {\n        return (\n            <div className=\"SelectedFilesDiv\">\n                <p>Selected files:</p>\n                <ul>{selectedFilesToReact()}</ul>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Upload files</h1>\n            <p>Current path: {currentPath}</p>\n            <button className=\"Button\" onClick={openFileSelectionWindow}>Add file(s)</button>\n            {showSelectedFiles()}\n            <button className=\"Button\" onClick={upload}>Upload</button>\n            <input id=\"file-input\" type=\"file\" multiple=\"multiple\"\n                name=\"fileUploadInput\"\n                className=\"file-selection\"\n                accept=\"image/*\"\n                onChange={(e) => {\n                       setSelectedFiles(e.target.files);\n                }}/>\n        </div>\n    );\n}\n\nexport default FileUpload;\n","\nimport React from \"react\";\n\n\nfunction Profile(props)\n{\n\treturn (\n\t\t<>\n\t\t\t<h1>Username</h1>\n\t\t\t<h2>WebId: https://webid...</h2>\n\t\t\t<p>email: my.email@gmail.com</p>\n\t\t\t<p>nickname: superNickname01</p>\n\t\t</>\n\t);\n}\n\nexport default Profile;","\n\nimport React from \"react\";\n\n\nfunction Contacts(props)\n{\n\treturn (\n\t\t<ul>\n\t\t\t<li>Romain</li>\n\t\t\t<li>Jerry</li>\n\t\t\t<li>Lin De</li>\n\t\t\t<li>Cyrille</li>\n\t\t</ul>\n\t);\n}\n\nexport default Contacts;","\nimport React from \"react\";\n\n\nfunction Albums(props)\n{\n\treturn (\n\t\t<>\n\t\t\t<h1>Albums</h1>\n\t\t\t<h2>Your albums</h2>\n\t\t\t<p>album1</p>\n\t\t\t<p>album1</p>\n\t\t</>\n\t);\n}\n\nexport default Albums;","import './App.css';\nimport Login from \"./Login\";\nimport FileExplorer from \"./FileExplorer\";\nimport FileUpload from \"./FileUpload\";\nimport Profile from \"./Profile\";\nimport Contacts from \"./Contacts\";\nimport Albums from \"./Albums\";\n\n\nimport React, {useState, useEffect} from \"react\";\nimport {AppBar, Toolbar} from '@material-ui/core';\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {Menu, MenuItem, Fab, BottomNavigation, BottomNavigationAction} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ViewCarouselIcon from '@material-ui/icons/ViewCarousel';\nimport PhotoIcon from '@material-ui/icons/Photo';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport PersonIcon from '@material-ui/icons/Person';\nimport GroupIcon from '@material-ui/icons/Group';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport {\n  // Import Router and not BrowserRouter, otherwise history.push()\n  // will update the url displayed in the browser but will not re-render afterwards\n  // Router,\n  Switch,\n  Route,\n  // Link,\n  // Redirect,\n  useHistory,\n  useRouteMatch\n} from \"react-router-dom\";\n\n\n// Style I want for fab, can add more - it's just a JS object\nconst useStyles = makeStyles({\n  fab: {\n    position: \"fixed\",\n    right: \"10px\",\n    bottom: \"10px\",\n  },\n  topBarRightElem: {\n    marginLeft: 'auto',\n  },\n  appBar: {\n    background: 'black',\n  },\n  bottomNavBtn: {\n    color: \"grey\",\n    \"&$selected\": {\n      color: \"red\"\n    }\n  }\n});\n\n\nfunction App() {\n    let [loggedIn, setLoggedIn] = useState(false);\n    let [webId, setWebId] = useState(\"\");\n    let [podUrl, setPodUrl] = useState(\"\");\n    let [explorerPath, setExplorerPath] = useState(\"\");\n\n    let history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        setExplorerPath(podUrl);\n    }, [podUrl])\n\n    function isLoggedIn()\n    {\n        return (webId !== \"\") && loggedIn;\n    }\n\n    function getLoginComponent()\n    {\n        return (<Login setWebId={setWebId} setLoggedIn={setLoggedIn} setPodUrl={setPodUrl}/>);\n    }\n\n    function getHomeComponent()\n    {\n        return <Home classes={classes} \n            webId={webId} podUrl={podUrl}\n            history={history}\n            explorerPath={explorerPath}\n            setExplorerPath={setExplorerPath}/>;\n    }\n\n\n    return (\n        <div className=\"app-div\">\n            {isLoggedIn() ? getHomeComponent() : getLoginComponent()}\n        </div>\n    );\n\n    // return (\n    //     <div className=\"app-div\">\n    //         <Switch>\n    //             <Route path=\"/login\">\n    //                 <Login setWebId={setWebId} setLoggedIn={setLoggedIn}/>\n    //                 {/* We execute this separately and after the login, this allows\n    //                 an automatic redirect to '/home' when we come back from login form. */}\n    //                 {isLoggedIn() ? <Redirect to=\"/\"/> : null} \n    //             </Route>\n    //             <Route path=\"/home/upload\">\n    //                 {isLoggedIn() ? [<MenuBar classes={classes} history={history}/>,\n    //                     <FileUpload explorerPath={explorerPath}/>] : <Redirect to={\"/\"} />\n    //                 }\n    //             </Route>\n    //             <Route path=\"/home\">\n    //                 <MenuBar classes={classes} history={history}/>\n    //                 {isLoggedIn() ? <Home classes={classes} webId={webId}\n    //                 history={history}\n    //                 explorerPath={explorerPath}\n    //                 setExplorerPath={setExplorerPath}/> : <Redirect to=\"/\"/>}\n    //             </Route>\n    //             <Route exact path=\"/\">\n    //                 {isLoggedIn() ? <Redirect push to=\"/home\"/> : <Redirect push to=\"/login\"/>}\n    //             </Route>\n    //         </Switch>\n    //     </div>\n    // );\n\n}\n\n\nfunction MenuBar(props)\n{\n    let history = props.history;\n    let classes = props.classes;\n    let gotoScreen = props.gotoScreen;\n\n    return(\n        <AppBar position=\"static\" className={classes.appBar}>\n            <Toolbar>\n                <IconButton style={{color: \"white\"}} className={classes.topBarRightElem} edge=\"start\"\n                aria-label=\"menu\" onClick={() => {props.gotoScreen('/upload')}}>\n                    <AddIcon/>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\n\nfunction BottomNavBar(props)\n{\n    let classes = props.classes;\n    let btnClass = classes.bottomNavBtn;\n    let gotoScreen = props.gotoScreen;\n    let [location, setLocation] = useState(\"/\");\n\n    const handleChange = (event, newValue) => {setLocation(newValue); gotoScreen(newValue)};\n\n\n    return(\n        <BottomNavigation className={classes.appBar} value={location} onChange={handleChange}\n        showLabels style={{position: 'fixed', width: \"300px\", borderRadius: \"10px\", bottom: \"10px\"}}>\n            <BottomNavigationAction className={btnClass} value=\"/\" label=\"Photos\" icon={<PhotoIcon/>} />\n            <BottomNavigationAction className={btnClass} value=\"/albums\" label=\"Albums\" icon={<FolderIcon/>} />\n            <BottomNavigationAction className={btnClass} value=\"/profile\" label=\"Profile\" icon={<AccountBoxIcon/>} />\n            <BottomNavigationAction className={btnClass} value=\"/contacts\" label=\"Contacts\" icon={<GroupIcon/>} />\n        </BottomNavigation>\n    );\n}\n\n\n\nfunction Home(props)\n{\n    let [notifMsg, setNotifMsg] = useState(\"\");\n    let [notifType, setNotifType] = useState(\"\");\n    let [loadingAnim, setLoadingAnim] = useState(false); // when first loading, show anim\n\n    let webId = props.webId;\n    let podUrl = props.podUrl;\n    let explorerPath = props.explorerPath;\n    let setExplorerPath = props.setExplorerPath;\n    let history = props.history;\n    \n    // let match = useRouteMatch();\n    const classes = props.classes;\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    function gotoScreen(screenPath)\n    {\n        console.log(`goto ${screenPath} ...`);\n        history.push(`${screenPath}`);\n    }\n\n    function showLoadingAnimation()\n    {\n        if (loadingAnim)\n        {\n            return <CircularProgress size={100} \n            style={{zIndex: 1600, position: \"fixed\", color: '#1a90ff'}}/>\n        }\n    }\n\n\n    function Notification(props)\n    {\n        let notifMsg = props.notifMsg;\n        let notifType = props.notifType;\n\n        return (<Collapse style={{overflowY: \"scroll\"}} in={(notifMsg !== \"\" && notifType !== \"\")}>\n                    <Alert severity={notifType} action={\n                            <IconButton\n                              aria-label=\"close\"\n                              color=\"inherit\"\n                              size=\"small\"\n                              onClick={() => {setNotifMsg(\"\");}}>\n                              <CloseIcon fontSize=\"inherit\" />\n                            </IconButton>}>\n                        {notifMsg}\n                    </Alert>\n                </Collapse>);\n    }\n\n    return (<>\n            <MenuBar classes={classes} history={history} gotoScreen={gotoScreen}/>\n            {showLoadingAnimation()}\n            <Notification notifMsg={notifMsg} notifType={notifType}/>\n            <div className=\"content\">\n                <Switch>\n                    <Route exact path=\"/upload\">\n                        <FileUpload explorerPath={explorerPath} setNotifMsg={setNotifMsg}\n                        setNotifType={setNotifType} setLoadingAnim={setLoadingAnim}/>\n                    </Route>\n                    <Route exact path=\"/profile\">\n                        <Profile/>\n                    </Route>\n                    <Route exact path=\"/contacts\">\n                        <Contacts/>\n                    </Route>\n                    <Route exact path=\"/albums\">\n                        <Albums/>\n                    </Route>\n                    <Route exact path=\"/\">\n                        {/*<h1>Home</h1>*/}\n                        {/*<h3>webID: {webId}</h3>*/}\n                        <FileExplorer podUrl={podUrl} explorerPath={explorerPath}\n                        setExplorerPath={setExplorerPath} setLoadingAnim={setLoadingAnim}/>\n                    </Route>\n                </Switch>\n            </div>\n            <BottomNavBar classes={classes} gotoScreen={gotoScreen}/>\n        </>);\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        {/*basename={process.env.PUBLIC_URL}*/}\n        <HashRouter> \n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}