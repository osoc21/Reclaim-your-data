{"version":3,"sources":["logo.svg","Login.js","FileExplorer.js","App.js","reportWebVitals.js","index.js"],"names":["Login","props","setLoggedIn","setWebId","session","a","handleIncomingRedirect","getDefaultSession","info","isLoggedIn","console","log","webId","handleRedirectAfterLogin","onClick","login","oidcIssuer","redirectUrl","window","location","href","clientName","FileExplorer","useState","files","setFiles","MY_POD_URL","tempPodPattern","getPODUrl","provider","podURL","match","resourceLink","itemURL","url","class","getFilesFromResourceURL","then","fileArray","getSolidDataset","fetch","fetchedFiles","getThingAll","children","length","slice","getFiles","id","reactElems","item","push","fileArrayToReact","App","loggedIn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddc538f5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React, {useState} from \"react\";\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n  login,\n  handleIncomingRedirect,\n  getDefaultSession,\n  fetch\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction Login(props) {\n\t// let [loggedIn, setLoggedIn] = useState(false);\n\t// \n\tlet setLoggedIn = props.setLoggedIn;\n\tlet setWebId = props.setWebId;\n\n\t// let MY_POD_URL = null;\n\tlet urlParentStack = [];\n\tlet session = null;\n\n\t// 1a. Start Login Process. Call login() function.\n\tfunction loginToInruptDotCom() {\n\t  // document.querySelector(\"#pod-issuer\").value\n\t  let chosenIssuer = \"https://broker.pod.inrupt.com\";\n\t  return login({\n\t    //oidcIssuer: \"https://broker.pod.inrupt.com\",\n\t    oidcIssuer: chosenIssuer,\n\n\t    redirectUrl: window.location.href,\n\t    clientName: \"Getting started app\"\n\t  });\n\t}\n\n\t// 1b. Login Redirect. Call handleIncomingRedirect() function.\n\t// When redirected after login, finish the process by retrieving session information.\n\tasync function handleRedirectAfterLogin() {\n\t  await handleIncomingRedirect();\n\n\t  session = getDefaultSession();\n\n\t  if (session.info.isLoggedIn) {\n\t    console.log(\"logged in\");\n\t    console.log(session);\n\t    // Update the page with the status.\n\t    // TODO: find a way to display the proper issuer after the redirect\n\t    // document.getElementById(\"labelStatus\").textContent = \"You are connected to \" + chosenIssuer;\n\t    setLoggedIn(true);\n\t    setWebId(session.info.webId);\n\t    // document.getElementById(\"labelStatus\").setAttribute(\"role\", \"alert\");\n\t  }\n\t}\n\n\thandleRedirectAfterLogin();\n\n\t// function getLoginText()\n\t// {\n\t// \tif (loggedIn)\n\t// \t{\n\t// \t\treturn \"You're logged in !!!\";\n\t// \t}\n\t// \treturn \"You're disconnected.\"\n\t// }\n\n\t// console.log(loggedIn);\n\n\treturn (\n\t    <button onClick={loginToInruptDotCom}>Log-in</button>\n\t);\n}\n\n\nexport default Login;","\nimport React, {useState} from \"react\";\n\nimport \"./FileExplorer.css\"\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n  fetch\n} from '@inrupt/solid-client-authn-browser';\n\n// Import from \"@inrupt/solid-client\"\nimport {\n  getSolidDataset,\n  getThing,\n  getThingAll,\n  getStringNoLocale,\n  // write data\n  setThing,\n  saveSolidDatasetAt,\n  // added to upload image to pod\n  saveFileInContainer, \n  getSourceUrl,\n  setStringNoLocale\n} from '@inrupt/solid-client';\n\n\n\n\nfunction FileExplorer(props) {\n\n    let [files, setFiles] = useState([]);\n    let MY_POD_URL = null;\n    let urlParentStack = [];\n    let webId = props.webId;\n\n    console.log(webId);\n\n    const solidwebPattern = \"https:\\/\\/(\\w+\\.)solidweb.org\\/\";\n    const podInruptPattern = \"https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\/\";\n    const tempPodPattern = /https:\\/\\/(\\w+\\.)solidweb.org\\/|https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\//;\n    \n    function getPODUrl(provider)\n    {\n        console.log(provider);\n        const podURL = provider.match(tempPodPattern)[0];\n        console.log(podURL);\n        return podURL;\n    }\n\n    async function fileExplorerGoBack()\n    {\n        console.log(\"*******\");\n        console.log(urlParentStack);\n        if (urlParentStack.length > 0)\n        {\n            urlParentStack.pop(); // remove the current dir from the stack\n            let url = urlParentStack[urlParentStack.length-1];\n            console.log(\"going back to \" + url + \" ...\");\n            getFilesFromResourceURL(url);\n        }\n        else\n        {\n            console.log(\"Cannot go back from POD root.\");\n        }\n    } \n\n\n    function resourceLink(itemURL)\n    {\n        let url = itemURL;\n\n        function open()\n        {\n            getFilesFromResourceURL(url).then((fileArray) => {\n                setFiles(fileArray);\n            });\n        }\n\n        return (\n           <p class=\"resource-link\" \n           onClick={open}>{url}</p>\n        );\n    }\n\n    /** Iteraetes on the file urls and returns an array of react components\n     * in the form of resourceLink elements  */\n    function fileArrayToReact()\n    {\n        console.log(\"file array to react\");\n\n        // the first child element is self\n        if (files.length > 0)\n        {\n            let reactElems = [];\n\n            for (let item of files)\n            {\n                reactElems.push(resourceLink(item.url));\n            }\n\n            return reactElems;\n        }\n\n        return <p>Nothing to display</p>;\n    }\n\n\n\n    async function getFilesFromResourceURL(url)\n    {\n        console.log(\"get files from URL\");\n        const fetchedFiles = await getSolidDataset(url, { fetch: fetch });\n        // console.log(\"fetched files:\");\n        // console.log(fetchedFiles,'\\n');\n\n        let children = await getThingAll(fetchedFiles);\n\n        // console.log(\"children: \");\n        // console.log(children);\n\n        // the first child element is self\n        if (children.length > 1)\n        {\n            return children.slice(1, children.length)\n        }\n\n        return [];\n\n    }\n\n\n\n    /** Fetch all files from the given path given relative to the root */\n    async function getFiles() \n    {\n        console.log(\"plain get files\");\n        // TODO: remove hardcoded stuff\n        const HARDCODE_URL = \"https://pod.inrupt.com/wepodrom/profile/card#me\";\n        MY_POD_URL = getPODUrl(HARDCODE_URL); // webId\n        console.log(\"podURL: \" + MY_POD_URL);\n\n        // Parse ProfileDocument URI from the `webID` value.\n        // const profileDocumentURI = webId.split('#')[0];\n        // document.getElementById(\"labelProfile\").textContent = profileDocumentURI;\n\n        getFilesFromResourceURL(MY_POD_URL).then((fileArray) => {\n            setFiles(fileArray);\n        });\n    }\n\n    // let files = getFiles();\n    // console.log(files);\n\n    if (files.length === 0)\n    {\n        getFiles();\n    }\n\n    return (\n        <div>\n          <h1> You are logged in to your POD </h1>\n          <div id=\"file-explorer\">\n            <button id=\"go-back\">Go back</button>\n            <p>Your files:</p>\n            <div id=\"file-viewer\">\n              <p><i>Web id: {webId}</i></p>\n              <ul>{fileArrayToReact()}</ul>\n            </div>\n          </div>\n        </div>\n    );\n}\n\nexport default FileExplorer;","import logo from './logo.svg';\nimport './App.css';\nimport Login from \"./Login\";\nimport FileExplorer from \"./FileExplorer\";\nimport React, {useState} from \"react\";\n\nfunction App() {\n  let [loggedIn, setLoggedIn] = useState(false);\n  let [webId, setWebId] = useState(\"\");\n\n  console.log(\"App webId: \"+ webId);\n  return (\n    <div>\n      {webId !== \"\" && loggedIn ? <div><h1> You are logged in !!!</h1><h3>webID: {webId}</h3> <FileExplorer webId={webId}/> </div> :\n      <Login setLoggedIn={setLoggedIn} setWebId={setWebId}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}