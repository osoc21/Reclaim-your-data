{"version":3,"sources":["pod.js","Login.js","GridView.js","FileExplorer.js","FileUpload.js","rdf.js","Profile.js","Contacts.js","Albums.js","ContactDetails.js","App.js","reportWebVitals.js","index.js"],"names":["tempPodPattern","getPODUrlFromWebId","webId","match","Login","props","setLoggedIn","setWebId","setPodUrl","session","a","handleIncomingRedirect","getDefaultSession","info","isLoggedIn","newPodUrl","handleRedirectAfterLogin","className","Button","size","variant","color","onClick","login","oidcIssuer","redirectUrl","window","location","href","clientName","GridView","files","setLoadingAnim","openFolder","useState","entries","setEntries","loadedImagesCounter","currentPath","useRef","nbImages","isFolder","url","endsWith","isImage","getName","length","sortByDate","sort","b","date","processedEntries","entry","processedEntry","shortName","imageUrl","push","fetchImageData","console","log","getFile","fetch","raw","URL","createObjectURL","Response","arrayBuffer","exifData","exif","readFromBinaryFile","dateTime","DateTime","replace","undefined","Date","latitude","longitude","updateLoadingAnim","current","useEffect","getEntriesFromFiles","ImageList","rowHeight","cols","map","folderEntry","index","idx","ImageListItem","onLoad","loading","src","alt","renderEntry","FileExplorer","POD_URL","podUrl","setFiles","explorerPath","setCurrentPath","setExplorerPath","getFilesFromResourceURL","then","fileArray","getSolidDataset","fetchedFiles","getThingAll","children","res","slice","getRootFiles","Container","id","disableGutters","FileUpload","selectedFiles","setSelectedFiles","setNotifMsg","setNotifType","upload","promiseArray","file","placeFileInContainer","Promise","all","promiseResults","errorMsg","i","name","updateMetadataFile","makeMetaDataEntry","fileUrl","makeMetadataFile","jsObjects","jsonString","JSON","stringify","File","type","contentToAdd","Array","from","metadataFile","text","fileContent","prevContent","parse","newContent","resContent","newMetadataFile","overwriteFile","slug","contentType","targetContainerURL","saveFileInContainer","error","selectedFilesToReact","document","querySelector","click","startIcon","endIcon","multiple","accept","onChange","e","target","queryEngine","newEngine","require","executeQuery","query","sources","comunicaSources","sourceFile","store","Store","method","response","textStream","headers","get","resolve","reject","rdfParser","split","baseIRI","on","quad","addQuad","value","result","bindings","metadata","getEmailCardUrlQuery","getEmailFromEmailCardUrlQuery","Profile","WEB_ID","username","setUsername","role","setRole","email","setEmail","useSession","parseSingleResult","profileDocumentURI","myDataset","profile","getThing","parsedUsername","getStringNoLocale","VCARD","fn","parsedRole","parsedEmail","resBindings","parsedEmailCardUrl","showField","field","getProfileData","getContactsBasicInfoQuery","Contacts","gotoScreen","podURL","setBindings","getContactsBasicInfoSource","Contact","binding","turtleFileUrl","fetchContacts","Albums","getWebIdFromPersonFileQuery","getRoleQuery","ContactDetails","contactUsername","realProps","params","contactPersonFileUrl","urlHiddenParams","contactWebId","setContactWebId","contactPodUrl","setContactPodUrl","parsedWebId","newContactPodUrl","getContactDetailsFromPersonFile","useStyles","makeStyles","fab","position","right","bottom","topBarRightElem","marginLeft","appBar","background","bottomNavBtn","MenuBar","history","classes","AppBar","Toolbar","Typography","IconButton","style","edge","BottomNavBar","btnClass","setLocation","handleChange","event","newValue","BottomNavigation","showLabels","width","BottomNavigationAction","label","icon","Home","notifMsg","notifType","loadingAnim","setUrlHiddenParams","screenPath","hiddenParams","updateHiddenParamsBefore","Notification","Collapse","overflowY","in","Alert","severity","action","fontSize","CircularProgress","zIndex","opacity","top","showLoadingAnimation","exact","path","render","App","loggedIn","useHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ef336b99.chunk.js","sourcesContent":["\n\nconst solidwebPattern = \"https:\\/\\/(\\w+\\.)solidweb.org\\/\";\nconst podInruptPattern = \"https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\/\";\nconst tempPodPattern = /https:\\/\\/(\\w+\\.)solidweb.org\\/|https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\//;\n\nfunction getPODUrlFromWebId(webId) \n{\n    return webId.match(tempPodPattern)[0];\n}\n\nexport {getPODUrlFromWebId};\nexport default getPODUrlFromWebId;","\nimport \"./Login.css\";\nimport {getPODUrlFromWebId} from './pod';\n\nimport React from \"react\";\n\nimport {Button} from '@material-ui/core';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n  login,\n  handleIncomingRedirect,\n  getDefaultSession,\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction Login(props) {\n\tlet setLoggedIn = props.setLoggedIn;\n\tlet setWebId = props.setWebId;\n\tlet setPodUrl = props.setPodUrl;\n\n\tlet session = null;\n\n\t// 1a. Start Login Process. Call login() function.\n\tfunction loginToInruptDotCom() {\n\t  let chosenIssuer = \"https://broker.pod.inrupt.com\";\n\t  return login({\n\t    oidcIssuer: chosenIssuer,\n\t    redirectUrl: window.location.href,\n\t    clientName: \"Getting started app\"\n\t  });\n\t}\n\n\t// 1b. Login Redirect. Call handleIncomingRedirect() function.\n\t// When redirected after login, finish the process by retrieving session information.\n\tasync function handleRedirectAfterLogin() {\n\t  await handleIncomingRedirect();\n\n\t  session = getDefaultSession();\n\n\t  if (session.info.isLoggedIn) {\n\t    // Update the page with the status.\n\t    await setLoggedIn(true);\n\t    await setWebId(session.info.webId);\n\t    let newPodUrl = getPODUrlFromWebId(session.info.webId);\n\t    await setPodUrl(newPodUrl);\n\t  }\n\t}\n\n\thandleRedirectAfterLogin();\n\n\treturn (\n\t\t<div className=\"login-frame\">\n\t    \t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={loginToInruptDotCom}>Log-in</Button>\n    \t</div>\n\t);\n}\n\n\nexport default Login;","import React, {useEffect, useState, useRef} from \"react\";\nimport {fetch} from '@inrupt/solid-client-authn-browser';\nimport {getFile, overwriteFile, saveFileInContainer, deleteFile} from '@inrupt/solid-client';\nimport {ImageList, ImageListItem} from '@material-ui/core';\nimport dms2dec from \"dms2dec\";\nimport \"./GridView.css\";\nimport exif from 'exif-js';\n\nfunction GridView(props) {\n    let files = props.files;\n    let openFolder = props.openFolder;\n    let setLoadingAnim = props.setLoadingAnim;\n    const [entries, setEntries] = useState([]);\n    let currentPath = props.currentPath;\n    let loadedImagesCounter = useRef(0);\n    let nbImages = useRef(0);\n\n    useEffect(() => {\n        nbImages.current = 0;\n        loadedImagesCounter.current = 0;\n        // here we use props prefix, otherwise setLoadingAnim is not recognized\n        getEntriesFromFiles(files);\n    }, [files]);\n\n    function isFolder(url) {\n        return url.endsWith(\"/\");\n    }\n\n    function isImage(url) {\n        return url.endsWith(\".jpg\") || url.endsWith(\".jpeg\") || url.endsWith(\".png\");\n    }\n\n    function getName(url) {\n        let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n        const match = url.match(regex);\n        return match[match.length - 1];\n    }\n\n    function sortByDate(files) {\n        return files.sort((a, b) => b.date - a.date);\n    }\n\n    async function getEntriesFromFiles(files) {\n        let processedEntries = [];\n\n        for (const entry of files) {\n            let processedEntry = {\n                url: entry.url,\n                shortName: getName(entry.url),\n                isFolder: isFolder(entry.url),\n                imageUrl: null,\n                date: null\n            };\n\n            processedEntries.push(processedEntry);\n        }\n        await fetchImageData(processedEntries);\n        await setEntries(processedEntries);\n        sortByDate(processedEntries);\n        //await uploadMetadataFile(processedEntries, currentPath);\n    }\n\n    async function fetchImageData(processedEntries) {\n        for (const entry of processedEntries) {\n            if (isImage(entry.url)) {\n                console.log(entry.url);\n                let raw = await getFile(entry.url, {fetch: fetch});\n                entry.imageUrl = URL.createObjectURL(raw);\n\n                let arrayBuffer = await new Response(raw).arrayBuffer();\n                let exifData = exif.readFromBinaryFile(arrayBuffer);\n                if (exifData) {\n                    let dateTime = exifData.DateTime ? exifData.DateTime.replace(\":\", \"/\").replace(\":\", \"/\") : undefined\n                    //let latitude = exifData.GPSLatitude && exifData.GPSLatitude[0] ? exifData.GPSLatitude : null\n                    //let longitude = exifData.GPSLongitude && exifData.GPSLongitude[0] ? exifData.GPSLongitude : null\n                    //console.log(`exifdata`);\n                    //console.log(dateTime);\n                    entry.date = new Date(dateTime);\n                    if (exifData.latitude != null && exifData.longitude != null) {\n                        // note: the dms2dec lib expects 4 parameters, but we haven't found a way to parse if the picture\n                        // was taken in the NESW direction, so at the moment it's hardcoded\n                        // TODO: extract NESW direction from EXIF data\n                        //console.log(dms2dec(exifData.latitude, \"N\", exifData.longitude, \"E\"));\n                    }\n                }\n                // sortByDate(processedEntries);\n            }\n        }\n    }\n\n    /** If called with a counter of loaded images higher than the size of the entries array,\n     * stops the loading animation. */\n    function updateLoadingAnim() {\n        loadedImagesCounter.current += 1;\n        if (loadedImagesCounter >= nbImages) {\n            setLoadingAnim(false);\n        }\n    }\n\n    function renderEntry(folderEntry, idx) {\n        if ((!folderEntry.isFolder) && folderEntry.imageUrl) {\n            return (<ImageListItem key={idx}>\n                <img onLoad={updateLoadingAnim} loading=\"lazy\" src={folderEntry.imageUrl} alt={folderEntry.imageUrl}/>\n            </ImageListItem>);\n        }\n        return null;\n    }\n\n    return (\n        <div className=\"grid-view\">\n            <ImageList rowHeight={160} cols={4}>\n                {entries.map((folderEntry, index) => renderEntry(folderEntry, index))}\n            </ImageList>\n        </div>\n    );\n}\n\nexport default GridView;","import React, {useEffect, useState} from \"react\";\nimport GridView from \"./GridView\";\nimport \"./FileExplorer.css\"\nimport {fetch} from '@inrupt/solid-client-authn-browser';\n\n// Import from \"@inrupt/solid-client\"\nimport {getSolidDataset, getThingAll, saveFileInContainer} from '@inrupt/solid-client';\n\nimport {Container, Box, Fab} from '@material-ui/core';\n\n// import CircularProgress from '@material-ui/core/CircularProgress';\n\n\nfunction FileExplorer(props) {\n    const POD_URL = props.podUrl;\n\n    let [files, setFiles] = useState([]);\n\n    let setLoadingAnim = props.setLoadingAnim;\n    let currentPath = props.explorerPath;\n    let setCurrentPath = props.setExplorerPath;\n\n    /*function fileExplorerGoBack() {\n        if (currentPath.length > POD_URL.length && currentPath !== POD_URL) {\n            if (currentPath === \"\") {\n                setCurrentPath(MY_POD_URL);\n            }\n        }\n    }*/\n\n\n    function fileExplorerGoBack() {\n        if (currentPath.length > POD_URL.length && currentPath !== POD_URL) {\n            // find the second-last '/', then keep the substring until that '/'\n            // this gives the new path url\n            let lastSlashPos = currentPath.slice(0, -1).lastIndexOf('/');\n            let newPath = currentPath.slice(0, lastSlashPos + 1)\n\n            openFolder(newPath);\n\n        } else {\n            alert(\"Cannot go back from POD root.\");\n        }\n    }\n\n\n    function resourceLink(itemURL, setCurrentPath, uniqueKey) {\n        let url = itemURL;\n        let resourceName = stripURL(url);\n\n        function open() {\n            if (url.endsWith(\"/\")) {\n                console.log(\"opening \" + url + \" ...\");\n                openFolder(url);\n            } else {\n                alert(\"this is a file, handle it\");\n            }\n        }\n\n        return {\"pathName\": {url}, \"open\": {open}};\n    }\n\n    /** Iteraetes on the file urls and returns an array of react components */\n    function stripURL(url) {\n        //Find the second-last '/', then keep the substring until that '/'\n        // this gives the new path url\n        let searchUpperBound = url.length;\n        if (url.endsWith('/')) {\n            searchUpperBound = url.length - 1\n        }\n        let slashPos = url.slice(0, searchUpperBound).lastIndexOf('/');\n        return url.slice(slashPos + 1, searchUpperBound);\n    }\n\n    function openFolder(url) {\n        setLoadingAnim(true);\n        // its important to set the current path first !!\n        getFilesFromResourceURL(url).then((fileArray) => {\n            setCurrentPath(url);\n            setFiles(fileArray);\n            setLoadingAnim(false);\n        });\n    }\n\n\n    async function getFilesFromResourceURL(url) {\n        console.log(\"url:\", url);\n        const fetchedFiles = await getSolidDataset(url, {fetch: fetch});\n\n        let children = await getThingAll(fetchedFiles);\n\n        let res = []\n\n        // note: the first child element is self\n        if (children.length > 1) {\n            res = children.slice(1, children.length)\n        }\n\n        return res;\n    }\n\n\n    /** Fetch all files from the given path given relative to the root */\n    async function getRootFiles() {\n        await setLoadingAnim(true);\n        getFilesFromResourceURL(POD_URL).then((fileArray) => {\n            setCurrentPath(POD_URL);\n            setFiles(fileArray);\n            // setLoadingAnim(false);\n        });\n    }\n\n    // only read files if not already in the array (avoid infinite refreshes !!!)\n    // but also if the current path is the root (it's possible that we're not in the\n    // root but the current path contains no file e.g. empty folder)\n    // if ((files.length === 0) && (currentPath === POD_URL))\n    // {\n    //     // Don't use animation here as FileExplorer might already\n    //     // be rendering and updating too many properties\n    //     // at that time might cause 'too many rerenders'\n    //     getRootFiles();\n    // }\n\n    useEffect(() => {\n        if (POD_URL !== \"\") {\n            getRootFiles();\n        }\n    }, [POD_URL]);\n\n\n    return (\n        <Container id=\"file-explorer\" disableGutters=\"true\">\n            <GridView files={files} openFolder={openFolder} setLoadingAnim={setLoadingAnim} currentPath={currentPath}/>\n        </Container>\n    );\n}\n\nexport default FileExplorer;\n","import \"./FileUpload.css\"\n\nimport React, {useState} from \"react\"\n\n// Import from \"@inrupt/solid-client\"\nimport {\n    saveFileInContainer,\n    getFile,\n    overwriteFile\n} from '@inrupt/solid-client';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n    fetch\n} from '@inrupt/solid-client-authn-browser';\n\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SendIcon from '@material-ui/icons/Send';\n\n\nfunction FileUpload(props) {\n    let currentPath = props.explorerPath;\n    let [selectedFiles, setSelectedFiles] = useState([]);\n    let setNotifMsg = props.setNotifMsg;\n    let setNotifType = props.setNotifType;\n    let setLoadingAnim = props.setLoadingAnim;\n\n    async function upload() {\n        let promiseArray = [];\n        await setLoadingAnim(true);\n        console.log(\"uploading ...\");\n        for (let file of selectedFiles) {\n            promiseArray.push(placeFileInContainer(file, currentPath));\n        }\n        let promiseResults = await Promise.all(promiseArray);\n        let errorMsg = \"\";\n        for (let i = 0; i < promiseResults.length; ++i) {\n            let res = promiseResults[i];\n\n            // promise is undefined if the upload wasn't sucessful\n            if (!res) {\n                errorMsg += \"'\" + selectedFiles[i].name + \"'\";\n            }\n\n        }\n        await setLoadingAnim(false);\n        // there is an error or more\n        if (errorMsg !== \"\") {\n            await setNotifType(\"error\");\n            await setNotifMsg(errorMsg);\n        } else if (selectedFiles.length > 0) {\n            await setNotifType(\"success\");\n            await setNotifMsg(\"Files successfully uploaded !!\");\n            await updateMetadataFile(selectedFiles);\n        } else if (selectedFiles.length === 0) {\n            await setNotifType(\"info\");\n            await setNotifMsg(\"Nothing to upload.\");\n        }\n    }\n\n    function makeMetaDataEntry(file) {\n        function getName(url) {\n            let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n            const match = url.match(regex);\n            return match[match.length - 1];\n        }\n\n        function isFolder(url) {\n            return url.endsWith(\"/\");\n        }\n\n        let fileUrl = currentPath + file.name;\n        let metadataEntry = {\n            url: fileUrl,\n            shortName: getName(fileUrl),\n            isFolder: isFolder(fileUrl),\n            imageUrl: null,\n            date: null\n        };\n        return metadataEntry;\n    }\n\n    function makeMetadataFile(jsObjects) {\n        const jsonString = `${JSON.stringify(jsObjects)}`;\n        return new File([jsonString], \"metadata.json\", {\n            type: \"application/json\"\n        });\n    }\n\n    async function updateMetadataFile(contentToAdd) {\n        let processedEntries = Array.from(contentToAdd).map(entry => makeMetaDataEntry(entry));\n        let metadataFile = makeMetadataFile(processedEntries);\n        let file = await getFile(currentPath + metadataFile.name, {fetch: fetch});\n        let fileContent = await file.text();\n\n        const prevContent = JSON.parse(fileContent);\n        const newContent = [...prevContent, ...processedEntries];\n        const resContent = await Promise.all(newContent);\n        const newMetadataFile = makeMetadataFile(resContent);\n        const savedFile = await overwriteFile(\n            currentPath + newMetadataFile.name,\n            newMetadataFile,\n            {\n                slug: newMetadataFile.name,\n                contentType: newMetadataFile.type,\n                fetch: fetch\n            });\n    }\n\n    /**\n     * Upload file into the targetContainer.\n     * @param  {[type]} file               [description]\n     * @param  {[type]} targetContainerURL [description]\n     * @return {[type]}                    [description]\n     */\n    async function placeFileInContainer(file, targetContainerURL) {\n        try {\n            const savedFile = await saveFileInContainer(\n                targetContainerURL,           // Container URL\n                file,                         // File\n                {\n                    slug: file.name, // file.name.split('.')[0]\n                    contentType: file.type, fetch: fetch\n                }\n            );\n            return file.name;\n            // await setNotifType(\"error\");\n            // await setNotifMsg(\"file '\" + file.name + \"' already exists.\");\n        } catch (error) {\n            console.error(\"ERROR CAUGHT:\", error);\n\n        }\n    }\n\n    function openFileSelectionWindow() {\n        document.querySelector(\"#file-input\").click();\n    }\n\n\n    function selectedFilesToReact() {\n        let res = [];\n        let i = 0;\n        // selectedFiles is iterable but not an array, \n        // so map() and forEach() functions don't work\n        for (let file of selectedFiles) {\n            res.push(<li key={i}>{file.name}</li>);\n            ++i;\n        }\n\n        return res;\n    }\n\n    function showUploadSection() {\n        return (\n            <div className=\"upload-section\">\n                <h4>Selected files:</h4>\n                <ul>{selectedFilesToReact()}</ul>\n                <Button variant=\"contained\" color=\"primary\" onClick={upload}\n                        endIcon={<SendIcon/>}>Upload</Button>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Upload files</h1>\n            <h4>Destination:</h4>\n            <p>{currentPath}</p>\n            <Button variant=\"contained\" color=\"primary\" onClick={openFileSelectionWindow}\n                    startIcon={<CloudUploadIcon/>}>\n                Select file(s)\n            </Button>\n            {selectedFiles.length > 0 ? showUploadSection() : null}\n            <input id=\"file-input\" type=\"file\" multiple=\"multiple\"\n                   name=\"fileUploadInput\"\n                   className=\"file-selection\"\n                   accept=\"image/*\"\n                   onChange={(e) => {\n                       setSelectedFiles(e.target.files);\n                   }}/>\n        </div>\n    );\n}\n\nexport default FileUpload;\n","import { useState,React } from \"react\";\nimport rdfParser from \"rdf-parse\";\nimport { Store } from \"n3\";\nimport {\n    useSession,\n  } from \"@inrupt/solid-ui-react\";\n\nimport {\n\tgetDefaultSession,\n\t} from \"@inrupt/solid-client-authn-browser\";\n\n\nconst newEngine = require('@comunica/actor-init-sparql').newEngine;\nconst queryEngine = newEngine();\n\nfunction printBindings(binding) {\n    const boundVariables = binding['_root'].entries.map(e => e[0]);\n    for (let variable of boundVariables){\n        console.log(variable, \" | \" ,binding.get(variable).value);\n    }\n}\n\n\nasync function executeQuery (query, sources, session) {   \n    const comunicaSources = []\n    \n    for (let sourceFile of sources) {\n        console.log(\"fetching\", sourceFile, \"...\");\n        const store = new Store();\n        const response = await session.fetch(sourceFile, { method: 'get' });\n        const textStream = require('streamify-string')(await response.text());\n        const contentType = response.headers.get('Content-Type');\n        console.log(\"Content type:\", contentType);\n        // const strippedUrl = sourceFile.split(\"#\")[0];\n        await new Promise((resolve, reject) => {\n            rdfParser.parse(textStream, { contentType: contentType.split(';')[0], baseIRI: sourceFile })\n            .on('data', (quad) => { console.log('QUAD', quad, store); store.addQuad(quad) })\n            .on('error', (error) => reject(error))\n            .on('end', async () => {resolve()})\n        });\n        comunicaSources.push({ type: 'rdfjsSource', value: store });\n    }\n    \n    const result = await queryEngine.query(query, {sources: comunicaSources});\n\n    // Consume results as an array (easier)\n    const bindings = await result.bindings();\n\n    // Log metadata containing source-level provenance information\n    const metadata = await result.metadata();\n    console.log(metadata)\n\n    return bindings;\n}\n\n\nexport  {printBindings, executeQuery};","\nimport React, {useState, useEffect}from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport {useSession} from \"@inrupt/solid-ui-react\";\nimport { VCARD, SCHEMA_INRUPT } from \"@inrupt/vocab-common-rdf\";\nimport { fetch } from \"@inrupt/solid-client-authn-browser\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  getSolidDataset,\n  getThing,\n  getStringNoLocale,\n  getUrlAll\n} from \"@inrupt/solid-client\";\n\nconst getRoleQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#role> ?o }\";\nconst getPODProviderUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/ns/solid/terms#oidcIssuer> ?o }\";\nconst getEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#hasEmail> ?o }\";\n// using email card url\nconst getEmailFromEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n\n\nfunction Profile(props)\n{\n\tconst WEB_ID = props.webId;\n\tconst POD_URL = props.podUrl;\n\tlet [username, setUsername] = useState(\"\"); //data.public;\n\tlet [role, setRole] = useState(\"\");\n\tlet [email, setEmail] = useState(\"\");\n\n\tconst { session } = useSession();\n\n\tuseEffect(() => {\n\t\tgetProfileData();\n\t}, [POD_URL]);\n\n\tfunction parseSingleResult(bindings)\n\t{\n\t\treturn bindings[0]['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\t}\n\n\tasync function getProfileData()\n\t{\n\t\tconst profileDocumentURI = WEB_ID.split('#')[0];\n\n\t\t// Use `getSolidDataset` to get the Profile document.\n\t\t// Profile document is public and can be read w/o authentication; i.e.: \n\t\t// - You can either omit `fetch` or \n\t\t// - You can pass in `fetch` with or without logging in first. \n\t\t//   If logged in, the `fetch` is authenticated.\n\t\t// For illustrative purposes, the `fetch` is passed in.\n\t\tconst myDataset = await getSolidDataset(profileDocumentURI, { fetch: session.fetch });\n\n\t\tconsole.log(\"dataset:\", myDataset);\n\t\t// Get the Profile data from the retrieved SolidDataset\n\t\tconst profile = getThing(myDataset, WEB_ID);\n\t\tconsole.log(\"profile:\", profile);\n\t\t// Get the formatted name using `VCARD.fn` convenience object.\n\t\t// `VCARD.fn` includes the identifier string \"http://www.w3.org/2006/vcard/ns#fn\".\n\t\t// As an alternative, you can pass in the \"http://www.w3.org/2006/vcard/ns#fn\" string instead of `VCARD.fn`.\n \n\t\tconst parsedUsername = getStringNoLocale(profile, VCARD.fn);\n\n\t\t// Get the role using `VCARD.role` convenience object.\n\t\t// `VCARD.role` includes the identifier string \"http://www.w3.org/2006/vcard/ns#role\"\n\t\t// As an alternative, you can pass in the \"http://www.w3.org/2006/vcard/ns#role\" string instead of `VCARD.role`.\n\n\t\tconst parsedRole = getStringNoLocale(profile, VCARD.role);\n\n\t\t// let parsedEmail = getUrlAll(profile, SCHEMA_INRUPT.email);\n\t\t// console.log(\"parsed email:\", parsedEmail);\n\t\tlet parsedEmail = null;\n\t\tlet resBindings = await executeQuery(getEmailCardUrlQuery, [WEB_ID], session);\n\t\tconsole.log(\"email card url res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t\t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t\t\tconsole.log(\"email res:\", resBindings);\n\t\t\tif (resBindings.length > 0)\n\t\t\t{\n\t\t\t\tparsedEmail = parseSingleResult(resBindings);\n\t\t\t}\n\t\t}\n\t\tsetUsername(parsedUsername);\n\t\tsetRole(parsedRole);\n\t\tsetEmail(parsedEmail);\n\t\t// return {username: parsedUsername, role: parsedRole};\n\t}\n\n\n\t// async function getDetailsFromWebId()\n\t// {\n\t// \tlet resBindings = await executeQuery(getRoleQuery, [WEB_ID], session);\n\t// \tconsole.log(\"role res:\", resBindings);\n\t// \tif (resBindings.length > 0)\n\t// \t{\n\t// \t\tlet parsedRole = parseSingleResult(resBindings);\n\t// \t\tsetRole(parsedRole);\n\t// \t}\n\t// \tresBindings = await executeQuery(getEmailCardUrlQuery, [WEB_ID], session);\n\t// \tconsole.log(\"email card url res:\", resBindings);\n\t// \tif (resBindings.length > 0)\n\t// \t{\n\t// \t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t// \t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t// \t\tconsole.log(\"email res:\", resBindings);\n\t// \t\tif (resBindings.length > 0)\n\t// \t\t{\n\t// \t\t\tlet parsedEmail = parseSingleResult(resBindings);\n\t// \t\t\tsetEmail(parsedEmail);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tfunction showField(field)\n\t{\n\t\treturn (<p>{field ? field : \"-\"}</p>);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Contact page of {username}</h1>\n\t\t\t<h4>WebId:</h4>\n\t\t\t{showField(WEB_ID)}\n\t\t\t<h4>POD url</h4>\n\t\t\t{showField(POD_URL)}\n\t\t\t<h4>Email:</h4>\n\t\t\t{showField(email)}\n\t\t\t<h4>Role</h4>\n\t\t\t{showField(role)}\n\t\t</>\n\t);\n}\n\nexport default Profile;","\n\nimport { useState,React, useEffect } from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport \"./Contacts.css\";\nimport {useSession} from \"@inrupt/solid-ui-react\";\n\nimport PersonIcon from '@material-ui/icons/Person';\n\n\n\n// const getPersonFilesQuery = \"SELECT * WHERE { ?s http://www.w3.org/2006/vcard/ns#fn ?o }\";\n\n//const getContactsBasicInfoSource = \"https://pod.inrupt.com/wepodrom/contacts/people.ttl#this\";\nconst getContactsBasicInfoQuery = \"SELECT ?s ?o WHERE {?s <http://www.w3.org/2006/vcard/ns#fn> ?o}\";\n\n// const contactsWebIdSource = \"https://pod.inrupt.com/wepodrom/contacts/Person/eafe09c7-4741-4251-91e3-90b0ea2aa043/index.ttl#this\";\n// const contactsWebIdQuery= \"\";\n\nconst defaultSource= \"https://pod.inrupt.com/wepodrom/profile/card#me\";\nconst defaultQuery = \"SELECT * WHERE {?s ?p ?o}\";\n\nfunction Contacts(props)\n{\n\tlet webId = props.webId;\n\tlet gotoScreen = props.gotoScreen;\n\tlet podURL = props.podUrl;\n\n\tconst { session } = useSession();\n\tconst [bindings, setBindings] = useState([]);\n\n\n\tasync function fetchContacts(){\n\t\tconsole.log(`fetching contacts of webid:'${webId}'`);\n\t\tlet getContactsBasicInfoSource = podURL + \"contacts/people.ttl#this\";\n\t\tlet resBindings = await executeQuery(getContactsBasicInfoQuery,[getContactsBasicInfoSource], session);\n\t\t// let contactWebIds = await executeQuery();\n\t\tawait setBindings(resBindings);\n\t}\n\t\n\tuseEffect(() => {\n\t\tfetchContacts();\n\t}, [webId])\n\t\n\n\tfunction bindingsView(binding) {\n\t    const boundVariables = binding['_root'].entries.map(e => e[0]);\n\t\tconsole.log(\"Bound variables:\\n\", boundVariables);\n\n\t    return (\n\t      <>\n\t      { boundVariables.map(variable => (\n\t          <p>\n\t              <span>{variable}</span> <span>{binding.get(variable).value}</span>\n\t          </p>\n\t        ))}\n\t      </>\n\t    );\n\t  }\n\n  \tfunction Contact(props)\n  \t{\n  \t\tlet binding = props.binding;\n  \t\t// const boundVariables = binding['_root'].entries.map(e => e[0]);\n\n  \t\tlet username = binding['_root'].entries[1][1]['id'].replace(/['\"]+/g, '');\n  \t\t// username = username.replace(\"/(\\\"|\\\"$)/\", '');\n  \t\tconsole.log(\"username:\", username)\n  \t\tlet turtleFileUrl = binding['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n  \t\t// let turtleFileId = turtleFileUrl.slice(0, turtleFileUrl.findLastOf('/'));\n  \t\t// turtleFileId = turtleFileId.slice(turtleFileId.findLastOf('/'), -1);\n  \t\t// turtleFileUrl = turtleFileUrl.replace(\"/(\\\"|\\\"$)/\", '');\n\n  \t\treturn (\n\t      \t<div className=\"contact\">\n\t      \t\t<PersonIcon/>\n\t          \t<p className=\"contact-name\" onClick={() => gotoScreen(`/contacts/${username}`, [turtleFileUrl])}>{username}</p>\n\t        </div>\n  \t\t);\n  \t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<h1>Contacts</h1>\n          \t{bindings.map((binding, idx) => {\n          \t\tconsole.log(\"Binding:\", binding); return (<Contact key={idx} binding={binding}/>)\n          \t}) }\n      \t</div>\n\t);\n}\n\nexport default Contacts;","\nimport React from \"react\";\n\n\nfunction Albums(props)\n{\n\treturn (\n\t\t<>\n\t\t\t<h1>Albums</h1>\n\t\t\t<h2>Your albums</h2>\n\t\t\t<p>album1</p>\n\t\t\t<p>album1</p>\n\t\t</>\n\t);\n}\n\nexport default Albums;","\nimport React, {useState, useEffect} from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport {getPODUrlFromWebId} from './pod';\nimport {useSession} from \"@inrupt/solid-ui-react\";\n\n// using person file as source\nconst getWebIdFromPersonFileQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n// using webid as source\nconst getRoleQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#role> ?o }\";\nconst getPODProviderUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/ns/solid/terms#oidcIssuer> ?o }\";\nconst getEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#hasEmail> ?o }\";\n// using email card url\nconst getEmailFromEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n\nfunction ContactDetails(props)\n{\n\tconsole.log(\"data:\", props);\n\tlet contactUsername = props.realProps.match.params.username; //data.public;\n\tlet contactPersonFileUrl = props.urlHiddenParams[0]; //data.hidden;\n\tlet [contactWebId,setContactWebId] = useState(\"\");\n\tlet [contactPodUrl, setContactPodUrl] = useState(\"\");\n\tlet [role, setRole] = useState(\"\");\n\tlet [email, setEmail] = useState(\"\");\n\n\tconst { session } = useSession();\n\n\tfunction parseSingleResult(bindings)\n\t{\n\t\treturn bindings[0]['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\t}\n\n\tasync function getContactDetailsFromPersonFile()\n\t{\n\t\tlet resBindings = await executeQuery(getWebIdFromPersonFileQuery, [contactPersonFileUrl], session);\n\t\tlet parsedWebId = parseSingleResult(resBindings);\n\t\tconsole.log(\"parsed contact webid:\", parsedWebId);\n\t\tsetContactWebId(parsedWebId);\n\t\tlet newContactPodUrl =  getPODUrlFromWebId(parsedWebId);\n\t\tsetContactPodUrl(newContactPodUrl);\n\t\tresBindings = await executeQuery(getRoleQuery, [parsedWebId], session);\n\t\tconsole.log(\"role res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedRole = parseSingleResult(resBindings);\n\t\t\tsetRole(parsedRole);\n\t\t}\n\t\tresBindings = await executeQuery(getEmailCardUrlQuery, [parsedWebId], session);\n\t\tconsole.log(\"email card url res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t\t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t\t\tconsole.log(\"email res:\", resBindings);\n\t\t\tif (resBindings.length > 0)\n\t\t\t{\n\t\t\t\tlet parsedEmail = parseSingleResult(resBindings);\n\t\t\t\tsetEmail(parsedEmail);\n\t\t\t}\n\t\t}\n\t\t// let email = \n\t}\n\n\tuseEffect(() => {\n\t\tgetContactDetailsFromPersonFile();\n\t}, [contactPersonFileUrl]);\n\n\t\n\tfunction showField(field)\n\t{\n\t\treturn (<p>{field ? field : \"-\"}</p>);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Contact page of {contactUsername}</h1>\n\t\t\t<h4>Person file url:</h4>\n\t\t\t{showField(contactPersonFileUrl)}\n\t\t\t<h4>WebId:</h4>\n\t\t\t{showField(contactWebId)}\n\t\t\t<h4>POD url</h4>\n\t\t\t{showField(contactPodUrl)}\n\t\t\t<h4>Email:</h4>\n\t\t\t{showField(email)}\n\t\t\t<h4>Role</h4>\n\t\t\t{showField(role)}\n\t\t</>\n\t);\n}\n\nexport default ContactDetails;","import './App.css';\nimport Login from \"./Login\";\nimport FileExplorer from \"./FileExplorer\";\nimport FileUpload from \"./FileUpload\";\nimport Profile from \"./Profile\";\nimport Contacts from \"./Contacts\";\nimport Albums from \"./Albums\";\nimport ContactDetails from \"./ContactDetails\";\n\n\nimport React, {useState, useEffect} from \"react\";\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {Menu, MenuItem, Fab, BottomNavigation, BottomNavigationAction} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ViewCarouselIcon from '@material-ui/icons/ViewCarousel';\nimport PhotoIcon from '@material-ui/icons/Photo';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\nimport PersonIcon from '@material-ui/icons/Person';\nimport GroupIcon from '@material-ui/icons/Group';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport {\n  // Import Router and not BrowserRouter, otherwise history.push()\n  // will update the url displayed in the browser but will not re-render afterwards\n  // Router,\n  Switch,\n  Route,\n  // Link,\n  // Redirect,\n  useHistory,\n  useRouteMatch\n} from \"react-router-dom\";\n\n\n// Style I want for fab, can add more - it's just a JS object\nconst useStyles = makeStyles({\n  fab: {\n    position: \"fixed\",\n    right: \"10px\",\n    bottom: \"10px\",\n  },\n  topBarRightElem: {\n    marginLeft: 'auto',\n  },\n  appBar: {\n    background: 'rgba(0,0,0,0.9)',\n  },\n  bottomNavBtn: {\n    color: \"grey\",\n    \"&$selected\": {\n      color: \"red\"\n    }\n  }\n});\n\n\nfunction App() {\n    let [loggedIn, setLoggedIn] = useState(false);\n    let [webId, setWebId] = useState(\"\");\n    let [podUrl, setPodUrl] = useState(\"\");\n    let [explorerPath, setExplorerPath] = useState(\"\");\n\n    let history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        setExplorerPath(podUrl);\n    }, [podUrl])\n\n    function isLoggedIn()\n    {\n        return (webId !== \"\") && loggedIn;\n    }\n\n    function getLoginComponent()\n    {\n        return (<Login setWebId={setWebId} setLoggedIn={setLoggedIn} setPodUrl={setPodUrl}/>);\n    }\n\n    function getHomeComponent()\n    {\n        return <Home classes={classes} \n            webId={webId} podUrl={podUrl}\n            history={history}\n            explorerPath={explorerPath}\n            setExplorerPath={setExplorerPath}/>;\n    }\n\n\n    return (\n        <div className=\"app-div\">\n            {isLoggedIn() ? getHomeComponent() : getLoginComponent()}\n        </div>\n    );\n\n    // return (\n    //     <div className=\"app-div\">\n    //         <Switch>\n    //             <Route path=\"/login\">\n    //                 <Login setWebId={setWebId} setLoggedIn={setLoggedIn}/>\n    //                 {/* We execute this separately and after the login, this allows\n    //                 an automatic redirect to '/home' when we come back from login form. */}\n    //                 {isLoggedIn() ? <Redirect to=\"/\"/> : null} \n    //             </Route>\n    //             <Route path=\"/home/upload\">\n    //                 {isLoggedIn() ? [<MenuBar classes={classes} history={history}/>,\n    //                     <FileUpload explorerPath={explorerPath}/>] : <Redirect to={\"/\"} />\n    //                 }\n    //             </Route>\n    //             <Route path=\"/home\">\n    //                 <MenuBar classes={classes} history={history}/>\n    //                 {isLoggedIn() ? <Home classes={classes} webId={webId}\n    //                 history={history}\n    //                 explorerPath={explorerPath}\n    //                 setExplorerPath={setExplorerPath}/> : <Redirect to=\"/\"/>}\n    //             </Route>\n    //             <Route exact path=\"/\">\n    //                 {isLoggedIn() ? <Redirect push to=\"/home\"/> : <Redirect push to=\"/login\"/>}\n    //             </Route>\n    //         </Switch>\n    //     </div>\n    // );\n\n}\n\n\nfunction MenuBar(props)\n{\n    let history = props.history;\n    let classes = props.classes;\n    let gotoScreen = props.gotoScreen;\n\n    return(\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\">\n                    WePod\n                </Typography>\n                <IconButton style={{color: \"white\"}} className={classes.topBarRightElem} edge=\"start\"\n                aria-label=\"menu\" onClick={async () => {await props.gotoScreen('/upload', null, false)}}>\n                    <AddIcon/>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\n\nfunction BottomNavBar(props)\n{\n    let classes = props.classes;\n    let btnClass = classes.bottomNavBtn;\n    let gotoScreen = props.gotoScreen;\n    let [location, setLocation] = useState(\"/\");\n\n    // NOTICE: we false as last parameter of gotoScreen, because we consider all the navigation tabs independent\n    // and as such we want hidden parameters to be updated after the screen change to not cause errors\n    const handleChange = async (event, newValue) => {await setLocation(newValue); await gotoScreen(newValue, null, false)};\n\n    return(\n        <BottomNavigation className={classes.appBar} value={location} onChange={handleChange}\n        showLabels style={{position: 'fixed', width: \"100%\", bottom: 0}}>\n            <BottomNavigationAction className={btnClass} value=\"/\" label=\"Photos\" icon={<PhotoIcon/>} />\n            <BottomNavigationAction className={btnClass} value=\"/albums\" label=\"Albums\" icon={<FolderIcon/>} />\n            <BottomNavigationAction className={btnClass} value=\"/profile\" label=\"Profile\" icon={<AccountBoxIcon/>} />\n            <BottomNavigationAction className={btnClass} value=\"/contacts\" label=\"Contacts\" icon={<GroupIcon/>} />\n        </BottomNavigation>\n    );\n}\n\n\n\nfunction Home(props)\n{\n    let [notifMsg, setNotifMsg] = useState(\"\");\n    let [notifType, setNotifType] = useState(\"info\");\n    let [loadingAnim, setLoadingAnim] = useState(false); // when first loading, show anim\n    let [urlHiddenParams, setUrlHiddenParams] = useState([]);\n\n    let webId = props.webId;\n    let podUrl = props.podUrl;\n    let explorerPath = props.explorerPath;\n    let setExplorerPath = props.setExplorerPath;\n    let history = props.history;\n\n    // let match = useRouteMatch();\n    const classes = props.classes;\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    async function gotoScreen(screenPath, hiddenParams = null, updateHiddenParamsBefore=true)\n    {\n        console.log(`goto ${screenPath} ...`);\n        console.log(`hidden params:\\n`, hiddenParams);\n\n        // By default, we update the hidden params before redirecting.\n        // This way, the newpage will have the proper parameters set before rendering\n        if (updateHiddenParamsBefore)\n        {\n            await setUrlHiddenParams(hiddenParams);\n        }\n        await setLoadingAnim(false); // always cancel loading anim when switching screen\n        history.push(`${screenPath}`);\n\n        // Some screens rely on hidden params as props, hence they will show an error\n        // if we change the hidden param before changing location (since everything is reference in JS).\n        // In that case, we can avoid the problem by setting updateHiddenParamsBefore to false,\n        // hence updating such prop after the screen change.\n        if (! updateHiddenParamsBefore)\n        {\n            await setUrlHiddenParams(hiddenParams);\n        }\n    }\n\n    function showLoadingAnimation()\n    {\n        if (loadingAnim)\n        {\n            return <CircularProgress color=\"secondary\" size={100} style={{zIndex: 1700, opacity: \".7\", position: \"fixed\", top: \"45vh\"}}/>\n        }\n    }\n\n\n    function Notification(props)\n    {\n        let notifMsg = props.notifMsg;\n        let notifType = props.notifType;\n\n        return (<Collapse style={{overflowY: \"scroll\"}} in={(notifMsg !== \"\" && notifType !== \"\")}>\n                    <Alert severity={notifType} action={\n                            <IconButton\n                              aria-label=\"close\"\n                              color=\"inherit\"\n                              size=\"small\"\n                              onClick={() => {setNotifMsg(\"\");}}>\n                              <CloseIcon fontSize=\"inherit\" />\n                            </IconButton>}>\n                        {notifMsg}\n                    </Alert>\n                </Collapse>);\n    }\n\n    return (<>\n            {showLoadingAnimation()}\n            <MenuBar classes={classes} history={history} gotoScreen={gotoScreen}/>\n            <Notification notifMsg={notifMsg} notifType={notifType}/>\n            <div className=\"content\">\n                {/*</div>*/}\n                <Switch>\n                    <Route exact path=\"/redirect\">\n                        <h1>Redirecting...</h1>\n                    </Route>\n                    <Route exact path=\"/upload\">\n                        <FileUpload explorerPath={explorerPath} setNotifMsg={setNotifMsg}\n                        setNotifType={setNotifType} setLoadingAnim={setLoadingAnim}/>\n                    </Route>\n                    <Route exact path=\"/profile\">\n                        <Profile webId={webId} podUrl={podUrl}/>\n                    </Route>\n                    <Route exact path=\"/contacts\">\n                        <Contacts gotoScreen={gotoScreen} podUrl={podUrl}/>\n                    </Route>\n                    <Route path=\"/contacts/:username\" render={(props) => <ContactDetails urlHiddenParams={urlHiddenParams} realProps={props} /> } />\n                    <Route exact path=\"/albums\">\n                        <Albums/>\n                    </Route>\n                    <Route exact path=\"/\">\n                        {/*<h1>Home</h1>*/}\n                        {/*<h3>webID: {webId}</h3>*/}\n                        <FileExplorer podUrl={podUrl} explorerPath={explorerPath}\n                        setExplorerPath={setExplorerPath} setLoadingAnim={setLoadingAnim}/>\n                    </Route>\n                </Switch>\n            </div>\n            <BottomNavBar classes={classes} gotoScreen={gotoScreen}/>\n        </>);\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        {/*basename={process.env.PUBLIC_URL}*/}\n        <HashRouter> \n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}