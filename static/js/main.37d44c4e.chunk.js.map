{"version":3,"sources":["pod.js","Login.js","GridView.js","FileExplorer.js","FileUpload.js","App.js","reportWebVitals.js","index.js"],"names":["tempPodPattern","getPODUrlFromWebId","webId","match","Login","props","setLoggedIn","setWebId","setPodUrl","session","a","handleIncomingRedirect","getDefaultSession","info","isLoggedIn","newPodUrl","handleRedirectAfterLogin","className","Button","size","variant","color","onClick","login","oidcIssuer","redirectUrl","window","location","href","clientName","GridView","files","openFolder","setLoadingAnim","useState","entries","setEntries","isFolder","url","endsWith","isImage","getName","length","processedUrls","entry","processedEntry","shortName","imageUrl","push","getFile","fetch","raw","URL","createObjectURL","useEffect","getEntriesFromFiles","ImageList","rowHeight","cols","map","folderEntry","index","idx","ImageListItem","src","alt","renderEntry","FileExplorer","POD_URL","podUrl","setFiles","loadingAnim","setCurrentPath","explorerPath","setExplorerPath","console","log","getFilesFromResourceURL","then","fileArray","getSolidDataset","fetchedFiles","getThingAll","children","res","slice","Container","id","CircularProgress","style","zIndex","position","right","bottom","showLoadingAnimation","FileUpload","currentPath","selectedFiles","setSelectedFiles","setNotifMsg","setNotifType","promiseArray","file","placeFileInContainer","Promise","all","promiseResults","errorMsg","i","name","targetContainerURL","saveFileInContainer","slug","contentType","type","error","selectedFilesToReact","document","querySelector","click","multiple","onChange","e","target","useStyles","makeStyles","fab","topBarRightElem","marginLeft","appBar","background","MenuBar","history","classes","AppBar","Toolbar","IconButton","edge","BottomNavBar","BottomNavigation","showLabels","width","borderRadius","BottomNavigationAction","label","icon","Home","notifMsg","notifType","Notification","Collapse","in","Alert","severity","action","fontSize","exact","path","App","loggedIn","useHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.37d44c4e.chunk.js","sourcesContent":["\n\nconst solidwebPattern = \"https:\\/\\/(\\w+\\.)solidweb.org\\/\";\nconst podInruptPattern = \"https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\/\";\nconst tempPodPattern = /https:\\/\\/(\\w+\\.)solidweb.org\\/|https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\//;\n\nfunction getPODUrlFromWebId(webId) \n{\n    return webId.match(tempPodPattern)[0];\n}\n\nexport {getPODUrlFromWebId};\nexport default getPODUrlFromWebId;","\nimport \"./Login.css\";\nimport {getPODUrlFromWebId} from './pod';\n\nimport React from \"react\";\n\nimport {Button} from '@material-ui/core';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n  login,\n  handleIncomingRedirect,\n  getDefaultSession,\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction Login(props) {\n\tlet setLoggedIn = props.setLoggedIn;\n\tlet setWebId = props.setWebId;\n\tlet setPodUrl = props.setPodUrl;\n\n\tlet session = null;\n\n\t// 1a. Start Login Process. Call login() function.\n\tfunction loginToInruptDotCom() {\n\t  let chosenIssuer = \"https://broker.pod.inrupt.com\";\n\t  return login({\n\t    oidcIssuer: chosenIssuer,\n\t    redirectUrl: window.location.href,\n\t    clientName: \"Getting started app\"\n\t  });\n\t}\n\n\t// 1b. Login Redirect. Call handleIncomingRedirect() function.\n\t// When redirected after login, finish the process by retrieving session information.\n\tasync function handleRedirectAfterLogin() {\n\t  await handleIncomingRedirect();\n\n\t  session = getDefaultSession();\n\n\t  if (session.info.isLoggedIn) {\n\t    // Update the page with the status.\n\t    setLoggedIn(true);\n\t    await setWebId(session.info.webId);\n\t    let newPodUrl = getPODUrlFromWebId(session.info.webId);\n\t    await setPodUrl(newPodUrl);\n\t  }\n\t}\n\n\thandleRedirectAfterLogin();\n\n\treturn (\n\t\t<div className=\"login-frame\">\n\t    \t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={loginToInruptDotCom}>Log-in</Button>\n    \t</div>\n\t);\n}\n\n\nexport default Login;","import React, {useEffect, useState} from \"react\";\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n    fetch\n  } from '@inrupt/solid-client-authn-browser';\n\n  // Import from \"@inrupt/solid-client\"\nimport {\n    getFile,\n  } from '@inrupt/solid-client';\n\n// import {Shape, Card, Row, Col, CardGroup, Image, Container} from 'react-bootstrap';\n\nimport {\nImageList,\nImageListItem,\nImageListItemBar} from '@material-ui/core';\n\n\n// import InfoIcon from '@material-ui/icons/Info';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\n\nimport \"./GridView.css\";\n\n\nfunction GridView(props){\n    let files = props.files;\n    let openFolder = props.openFolder;\n    let setLoadingAnim = props.setLoadingAnim;\n    const [entries, setEntries] = useState([]);\n\n    useEffect(() => {\n        getEntriesFromFiles(files)\n    }, [files]);\n\n    function isFolder(url){\n        return url.endsWith(\"/\");\n    }\n\n    function isImage(url){\n       return url.endsWith(\".jpg\") || url.endsWith(\".jpeg\") || url.endsWith(\".png\");\n    }\n\n    function getName(url){\n        let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n        const match = url.match(regex);\n        // console.log(match);\n        return match[match.length - 1];\n    }\n\n    async function getEntriesFromFiles(files) \n    {\n        // console.log(\"Fetching\");\n        // console.log(files);\n        let processedUrls = [];\n\n        for (const entry of files) \n        {\n            // console.log(entry);\n            let processedEntry = {\n                url: entry.url,\n                shortName: getName(entry.url),\n                isFolder: isFolder(entry.url),\n                imageUrl: null,\n            };\n\n            processedUrls.push(processedEntry);\n\n            if (isImage(processedEntry.url)) \n            {\n                let raw = await getFile(processedEntry.url, { fetch: fetch });\n                let imageUrl = URL.createObjectURL(raw);\n                processedEntry.imageUrl = imageUrl;\n            }\n        }\n\n        setEntries(processedUrls);\n    }\n\n    // TODO: move this to utils.js or other appropriate file\n    function renderEntry(folderEntry, idx)\n    {\n        if((! folderEntry.isFolder) && folderEntry.imageUrl)\n        {\n            return (<ImageListItem>\n                        <img src={folderEntry.imageUrl} alt={folderEntry.imageUrl}/>\n                    </ImageListItem>);\n        }\n        return null;\n    }\n\n    function _renderEntryOLD(folderEntry){\n        let result = null;\n        // console.log(\"imageUrl: \" + folderEntry.imageUrl);\n        \n        // folders\n        if(folderEntry.isFolder)\n        {\n            // use ...background: 'grey'.. for debugging\n            result = [<FolderIcon key=\"1\" style={{margin: \"-20px\", color: '#ffdd99', fontSize: 160 }}\n            onClick={() => openFolder(folderEntry.url)}/>, \n            <p key=\"2\">{folderEntry.shortName}</p>];\n            // <div className=\"folder\" ></div>;\n        }\n        // only image files\n        else if(folderEntry.imageUrl)\n        {\n            result = [<img key=\"1\" src={folderEntry.imageUrl} alt={folderEntry.imageUrl}/>,\n                      <ImageListItemBar key=\"2\" title={folderEntry.shortName}\n                            // subtitle={<span>url: {folderEntry.url}</span>}\n                            // actionIcon={\n                            // <IconButton aria-label={`info about ${folderEntry.shortName}`}>\n                            //     <InfoIcon/>\n                            // </IconButton>\n                            // }\n                       />];\n            \n        }\n        // any other file aside of folders and images\n        else\n        {\n            result = [<InsertDriveFileIcon key=\"1\" color=\"action\" style={{ margin: \"-10px\" , fontSize: 140 }}\n            onClick={() => alert(\"Can't open this file type.\")}/>,\n            <p key=\"2\">{folderEntry.shortName}</p>];\n        }\n\n        return result;\n    }\n\n\n    // async function renderAllFiles()\n    // {\n    //     let res = entries.map( (folderEntry, index) => renderEntry(folderEntry, index) );\n    //     await setLoadingAnim(false);\n    //     return res;\n    // }\n\n    // useEffect(() => {\n\n    // }, []);\n\n    return(\n        <div className=\"grid-view\">\n            <ImageList rowHeight={160} cols={3}>\n                {entries.map( (folderEntry, index) => renderEntry(folderEntry, index) )}\n            </ImageList>\n        </div>  \n    );\n}\n\n\nexport default GridView;","\nimport \"./FileExplorer.css\"\n\nimport React, {useState, useEffect} from \"react\";\nimport GridView from \"./GridView\";\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {fetch} from '@inrupt/solid-client-authn-browser';\n\n// Import from \"@inrupt/solid-client\"\nimport {getSolidDataset, getThingAll} from '@inrupt/solid-client';\n\nimport {Container, Box, Fab} from '@material-ui/core';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nfunction FileExplorer(props) {\n    const POD_URL = props.podUrl;\n\n    let [files, setFiles] = useState([]);\n    let [loadingAnim, setLoadingAnim] = useState(true); // when first loading, show anim\n\n    let currentPath = props.explorerPath;\n    let setCurrentPath = props.setExplorerPath;\n\n\n    function fileExplorerGoBack() \n    {\n        if (currentPath.length > POD_URL.length && currentPath !== POD_URL) \n        {\n            // find the second-last '/', then keep the substring until that '/'\n            // this gives the new path url\n            let lastSlashPos = currentPath.slice(0, -1).lastIndexOf('/');\n            let newPath = currentPath.slice(0, lastSlashPos + 1)\n\n            openFolder(newPath);\n           \n        } \n        else \n        {\n            alert(\"Cannot go back from POD root.\");\n        }\n    }\n\n\n    function resourceLink(itemURL, setCurrentPath, uniqueKey) {\n        let url = itemURL;\n        let resourceName = stripURL(url);\n\n        function open() \n        {\n            if (url.endsWith(\"/\")) \n            {\n                console.log(\"opening \" + url + \" ...\");\n                openFolder(url);\n            } \n            else \n            {\n                alert(\"this is a file, handle it\");\n            }\n        }\n\n       return {\"pathName\": {url}, \"open\": {open}};\n    }\n\n    /** Iteraetes on the file urls and returns an array of react components */\n    function stripURL(url) {\n        //Find the second-last '/', then keep the substring until that '/'\n        // this gives the new path url\n        let searchUpperBound = url.length;\n        if (url.endsWith('/')) {\n            searchUpperBound = url.length - 1\n        }\n        let slashPos = url.slice(0, searchUpperBound).lastIndexOf('/');\n        return url.slice(slashPos + 1, searchUpperBound);\n    }\n\n\n    function openFolder(url)\n    {\n        console.log(\"open folder ...\");\n        setLoadingAnim(true);\n        // its important to set the current path first !!\n        getFilesFromResourceURL(url).then((fileArray) => {\n            setCurrentPath(url);\n            setFiles(fileArray);\n            setLoadingAnim(false);\n        });\n    }\n\n\n    function showLoadingAnimation()\n    {\n        if (loadingAnim)\n        {\n            return <CircularProgress size={100} style={{zIndex: 1600, position: \"fixed\", right: \"40vw\", bottom: \"50vh\", color: '#1a90ff',\n                }}/>\n        }\n    }\n\n\n    /** Iterates on the file urls and returns an array of react components\n     * in the form of resourceLink elements  */\n    function fileArrayToReact() {\n        if (loadingAnim)\n        {\n            return <div className=\"loader\"></div> \n        }\n\n        // the first child element is self\n        if (files.length > 0) {\n            let reactElems = [];\n            let i = 0;\n\n            for (let item of files) {\n                reactElems.push(resourceLink(item.url, setCurrentPath, i));\n                i++;\n            }\n\n            return reactElems;\n        }\n\n        return <p><i>Nothing to display</i></p>;\n    }\n\n\n    async function getFilesFromResourceURL(url) {\n        console.log(\"url:\", url);\n        const fetchedFiles = await getSolidDataset(url, {fetch: fetch});\n\n        let children = await getThingAll(fetchedFiles);\n\n        let res = []\n\n        // note: the first child element is self\n        if (children.length > 1) {\n            res = children.slice(1, children.length)\n        }\n\n        return res;\n    }\n\n\n    /** Fetch all files from the given path given relative to the root */\n    function getRootFiles() {\n        getFilesFromResourceURL(POD_URL).then((fileArray) => {\n            setCurrentPath(POD_URL);\n            setFiles(fileArray);\n            setLoadingAnim(false);\n        });\n    }\n\n\n    // only read files if not already in the array (avoid infinite refreshes !!!)\n    // but also if the current path is the root (it's possible that we're not in the\n    // root but the current path contains no file e.g. empty folder)\n    // if ((files.length === 0) && (currentPath === POD_URL)) \n    // {\n    //     // Don't use animation here as FileExplorer might already\n    //     // be rendering and updating too many properties\n    //     // at that time might cause 'too many rerenders'\n    //     getRootFiles();\n    // }\n\n    useEffect(() => {\n        if (POD_URL !== \"\")\n        {\n            getRootFiles();\n        }\n    }, [POD_URL]);\n\n\n    return (\n        <Container id=\"file-explorer\">\n            {showLoadingAnimation()}\n            <GridView files={files} openFolder={openFolder} setLoadingAnim={setLoadingAnim}/>\n        </Container>\n    );\n}\n\nexport default FileExplorer;","import React, {useState} from \"react\"\n\n// Import from \"@inrupt/solid-client\"\nimport {\n    saveFileInContainer\n} from '@inrupt/solid-client';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n    fetch\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction FileUpload(props) {\n    let currentPath = props.explorerPath;\n    let [selectedFiles, setSelectedFiles] = useState([]);\n    let setNotifMsg = props.setNotifMsg;\n    let setNotifType = props.setNotifType;\n\n    async function upload() {\n        let promiseArray = [];\n        console.log(\"uploading ...\");\n        for (let file of selectedFiles) {\n            promiseArray.push(placeFileInContainer(file, currentPath));\n        }\n        let promiseResults = await Promise.all(promiseArray);\n        let errorMsg = \"\";\n        for (let i = 0 ; i < promiseResults.length ; ++i)\n        {\n            let res = promiseResults[i];\n            // console.log(res)\n             \n            // promise is undefined if the upload wasn't sucessful\n            if (! res)\n            {\n                errorMsg += \"Could not upload '\" + selectedFiles[i].name + \"', the file might already exist.\\n\";\n            }\n           \n        }\n\n        // there is an error or more\n        if (errorMsg !== \"\")\n        {\n            await setNotifType(\"error\");\n            await setNotifMsg(errorMsg);\n        }\n        else\n        {\n            await setNotifType(\"success\");\n            await setNotifMsg(\"Files successfully uploaded !!\");\n        }\n\n\n        //TODO: add success/failure notification of uploading file(s)\n    }\n\n    /**\n     * Upload file into the targetContainer.\n     * @param  {[type]} file               [description]\n     * @param  {[type]} targetContainerURL [description]\n     * @return {[type]}                    [description]\n     */\n    async function placeFileInContainer(file, targetContainerURL) {\n        try {\n            const savedFile = await saveFileInContainer(\n                targetContainerURL,           // Container URL\n                file,                         // File\n                {\n                    slug: file.name, // file.name.split('.')[0]\n                    contentType: file.type, fetch: fetch\n                }\n            );\n            return file.name;\n            // await setNotifType(\"error\");\n            // await setNotifMsg(\"file '\" + file.name + \"' already exists.\");\n        } catch (error) {\n            console.error(\"ERROR CAUGHT:\", error);\n            \n        }\n    }\n\n    function openFileSelectionWindow() {\n        document.querySelector(\"#file-input\").click();\n    }\n\n\n    function selectedFilesToReact() {\n        let res = [];\n\n        // selectedFiles is iterable but not an array, \n        // so map() and forEach() functions don't work\n        for (let file of selectedFiles) {\n            res.push(<li>{file.name}</li>);\n        }\n\n        return res;\n    }\n\n    function showSelectedFiles() {\n        return (\n            <div className=\"SelectedFilesDiv\">\n                <p>Selected files:</p>\n                <ul>{selectedFilesToReact()}</ul>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Upload files</h1>\n            <p>Current path: {currentPath}</p>\n            <button className=\"Button\" onClick={openFileSelectionWindow}>Add file(s)</button>\n            {showSelectedFiles()}\n            <button className=\"Button\" onClick={upload}>Upload</button>\n            <input id=\"file-input\" type=\"file\" multiple=\"multiple\"\n                name=\"fileUploadInput\"\n                className=\"file-selection\"\n                onChange={(e) => {\n                       setSelectedFiles(e.target.files);\n                }}/>\n        </div>\n    );\n}\n\nexport default FileUpload;\n","import './App.css';\nimport Login from \"./Login\";\nimport FileExplorer from \"./FileExplorer\";\nimport FileUpload from \"./FileUpload\";\n\nimport React, {useState, useEffect} from \"react\";\nimport {AppBar, Toolbar} from '@material-ui/core';\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {Menu, MenuItem, Fab, BottomNavigation, BottomNavigationAction} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ViewCarouselIcon from '@material-ui/icons/ViewCarousel';\nimport PhotoIcon from '@material-ui/icons/Photo';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\n\n\nimport {\n  // Import Router and not BrowserRouter, otherwise history.push()\n  // will update the url displayed in the browser but will not re-render afterwards\n  // Router,\n  Switch,\n  Route,\n  // Link,\n  // Redirect,\n  useHistory,\n  useRouteMatch\n} from \"react-router-dom\";\n\n\n\n// Style I want for fab, can add more - it's just a JS object\nconst useStyles = makeStyles({\n  fab: {\n    position: \"fixed\",\n    right: \"10px\",\n    bottom: \"10px\",\n  },\n  topBarRightElem: {\n    marginLeft: 'auto',\n  },\n  appBar: {\n    background: 'linear-gradient(to right, #0f0c29, #302b63, #24243e)',\n  },\n});\n\n\nfunction App() {\n    let [loggedIn, setLoggedIn] = useState(false);\n    let [webId, setWebId] = useState(\"\");\n    let [podUrl, setPodUrl] = useState(\"\");\n    let [explorerPath, setExplorerPath] = useState(\"\");\n    let history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        setExplorerPath(podUrl);\n    }, [podUrl])\n\n    function isLoggedIn()\n    {\n        return (webId !== \"\") && loggedIn;\n    }\n\n    function getLoginComponent()\n    {\n        return (<Login setWebId={setWebId} setLoggedIn={setLoggedIn} setPodUrl={setPodUrl}/>);\n    }\n\n    function getHomeComponent()\n    {\n        return <Home classes={classes} \n            webId={webId} podUrl={podUrl}\n            history={history}\n            explorerPath={explorerPath}\n            setExplorerPath={setExplorerPath}/>;\n    }\n\n\n    return (\n        <div className=\"app-div\">\n            {isLoggedIn() ? getHomeComponent() : getLoginComponent()}\n        </div>\n    );\n\n    // return (\n    //     <div className=\"app-div\">\n    //         <Switch>\n    //             <Route path=\"/login\">\n    //                 <Login setWebId={setWebId} setLoggedIn={setLoggedIn}/>\n    //                 {/* We execute this separately and after the login, this allows\n    //                 an automatic redirect to '/home' when we come back from login form. */}\n    //                 {isLoggedIn() ? <Redirect to=\"/\"/> : null} \n    //             </Route>\n    //             <Route path=\"/home/upload\">\n    //                 {isLoggedIn() ? [<MenuBar classes={classes} history={history}/>,\n    //                     <FileUpload explorerPath={explorerPath}/>] : <Redirect to={\"/\"} />\n    //                 }\n    //             </Route>\n    //             <Route path=\"/home\">\n    //                 <MenuBar classes={classes} history={history}/>\n    //                 {isLoggedIn() ? <Home classes={classes} webId={webId}\n    //                 history={history}\n    //                 explorerPath={explorerPath}\n    //                 setExplorerPath={setExplorerPath}/> : <Redirect to=\"/\"/>}\n    //             </Route>\n    //             <Route exact path=\"/\">\n    //                 {isLoggedIn() ? <Redirect push to=\"/home\"/> : <Redirect push to=\"/login\"/>}\n    //             </Route>\n    //         </Switch>\n    //     </div>\n    // );\n\n}\n\n\nfunction MenuBar(props)\n{\n    let history = props.history;\n    let classes = props.classes;\n\n    function gotoFileUpload()\n    {\n        console.log(\"goto file upload screen ...\");\n        history.push(`/upload`);\n    }\n\n    return(\n        <AppBar position=\"static\" className={classes.appBar}>\n            <Toolbar>\n                <IconButton style={{color: \"white\"}} className={classes.topBarRightElem} edge=\"start\"\n                aria-label=\"menu\" onClick={gotoFileUpload}>\n                    <AddIcon/>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\n\nfunction BottomNavBar(props)\n{\n    let classes = props.classes;\n\n    return(\n        <BottomNavigation className={classes.appBar}\n        showLabels style={{position: 'fixed', bottom: 0, width: \"300px\", borderRadius: \"10px\", bottom: \"10px\"}}>\n            <BottomNavigationAction style={{color: \"white\"}} label=\"Photos\" icon={<PhotoIcon/>} />\n            <BottomNavigationAction style={{color: \"white\"}} label=\"Albums\" icon={<ViewCarouselIcon/>} />\n        </BottomNavigation>\n    );\n}\n\n\n\nfunction Home(props)\n{\n    let [notifMsg, setNotifMsg] = useState(\"\");\n    let [notifType, setNotifType] = useState(\"\");\n\n    let webId = props.webId;\n    let podUrl = props.podUrl;\n    let explorerPath = props.explorerPath;\n    let setExplorerPath = props.setExplorerPath;\n    let history = props.history;\n    // let match = useRouteMatch();\n    const classes = props.classes;\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    function gotoFileUpload()\n    {\n        console.log(\"goto file upload screen ...\");\n        history.push(`/upload`);\n    }\n\n    function Notification(props)\n    {\n        let notifMsg = props.notifMsg;\n        let notifType = props.notifType;\n\n        return (<Collapse in={notifMsg !== \"\"}>\n                    <Alert key=\"2\" severity={notifType} action={\n                            <IconButton\n                              aria-label=\"close\"\n                              color=\"inherit\"\n                              size=\"small\"\n                              onClick={() => {setNotifMsg(\"\");}}>\n                              <CloseIcon fontSize=\"inherit\" />\n                            </IconButton>}>\n                        {notifMsg}\n                    </Alert>\n                </Collapse>);\n    }\n\n    return [<MenuBar key=\"1\" classes={classes} history={history}/>,\n            <Notification notifMsg={notifMsg} notifType={notifType}/>,\n            <div key=\"3\" className=\"content\">\n                <Switch>\n                    <Route exact path=\"/upload\">\n                        <FileUpload explorerPath={explorerPath} setNotifMsg={setNotifMsg}\n                        setNotifType={setNotifType}/>\n                    </Route>\n                    <Route exact path=\"/\">\n                        {/*<h1>Home</h1>*/}\n                        {/*<h3>webID: {webId}</h3>*/}\n                        <FileExplorer podUrl={podUrl} explorerPath={explorerPath}\n                        setExplorerPath={setExplorerPath}/>\n                    </Route>\n                </Switch>\n            </div>,\n            <BottomNavBar classes={classes} key=\"4\"/>\n    ];\n}\n\n\nfunction _HomeOLD(props)\n{\n    let webId = props.webId;\n    let match = useRouteMatch();\n    const classes = props.classes;\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleFabClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleFabClose = () => {\n        setAnchorEl(null);\n    };\n\n    function gotoFileUpload()\n    {\n        console.log(\"goto file upload screen ...\");\n        props.history.replace(`${match.url}/upload`);\n        handleFabClose();\n    }\n\n    return (\n        <div>\n            <h1>Home</h1>\n            {/*<h3>webID: {webId}</h3>*/}\n            <FileExplorer webId={webId} explorerPath={props.explorerPath}\n            setExplorerPath={props.setExplorerPath}/>\n            <Fab className={classes.fab} color=\"primary\" \n            aria-label=\"add\" aria-controls=\"simple-menu\"\n            onClick={handleFabClick} aria-haspopup=\"true\">\n              <AddIcon/>\n            </Fab>\n            <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleFabClose}\n            >\n                <MenuItem onClick={gotoFileUpload}>Upload files</MenuItem>\n                <MenuItem onClick={handleFabClose}>New folder</MenuItem>\n            </Menu>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        {/*basename={process.env.PUBLIC_URL}*/}\n        <HashRouter> \n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}