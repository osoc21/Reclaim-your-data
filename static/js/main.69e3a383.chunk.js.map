{"version":3,"sources":["constants.js","pod.js","Login.js","GridView.js","FileExplorer.js","FileUpload.js","rdf.js","Profile.js","Contacts.js","Albums.js","ContactDetails.js","BottomNavBar.js","MenuBar.js","Notification.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["GITHUB_PAGE_LINK","tempPodPattern","getPODUrlFromWebId","webId","match","Login","props","setLoggedIn","setWebId","setPodUrl","session","a","handleIncomingRedirect","getDefaultSession","info","isLoggedIn","newPodUrl","handleRedirectAfterLogin","className","Button","size","variant","color","onClick","login","oidcIssuer","redirectUrl","window","location","href","clientName","style","marginTop","event","startIcon","GridView","files","setLoadingAnim","useState","entries","setEntries","currentPath","loadedImagesCounter","useRef","nbImages","isImage","url","endsWith","sortByDate","sort","b","date","dummyMetadataFile","File","type","console","log","name","getFile","fetch","metadataFile","text","fileContent","parsedContent","JSON","parse","length","fetchImageData","processedEntries","entry","raw","imageUrl","URL","createObjectURL","Response","arrayBuffer","exifData","exif","readFromBinaryFile","dateTime","DateTime","replace","undefined","Date","latitude","longitude","updateLoadingAnim","current","useEffect","readMetadataFile","ImageList","rowHeight","cols","map","folderEntry","index","idx","isFolder","ImageListItem","onLoad","loading","src","alt","renderEntry","FileExplorer","POD_URL","podUrl","setFiles","explorerPath","setCurrentPath","setExplorerPath","getFilesFromResourceURL","getSolidDataset","fetchedFiles","getThingAll","children","res","slice","then","fileArray","getRootFiles","Container","id","disableGutters","openFolder","FileUpload","selectedFiles","setSelectedFiles","setNotifMsg","setNotifType","upload","promiseArray","file","push","placeFileInContainer","Promise","all","promiseResults","errorMsg","i","updateMetadataFile","makeMetaDataEntry","fileUrl","shortName","getName","makeMetadataFile","jsObjects","jsonString","stringify","newFileEntries","Array","from","prevContent","newContent","resContent","newMetadataFile","overwriteFile","slug","contentType","targetContainerURL","saveFileInContainer","selectedFilesToReact","document","querySelector","click","endIcon","multiple","accept","onChange","e","target","queryEngine","newEngine","require","executeQuery","query","sources","comunicaSources","sourceFile","store","Store","method","response","textStream","headers","get","resolve","reject","rdfParser","split","baseIRI","on","quad","addQuad","error","value","result","bindings","metadata","getEmailCardUrlQuery","getEmailFromEmailCardUrlQuery","Profile","WEB_ID","username","setUsername","role","setRole","email","setEmail","useSession","parseSingleResult","profileDocumentURI","myDataset","profile","getThing","parsedUsername","getStringNoLocale","VCARD","fn","parsedRole","parsedEmail","resBindings","parsedEmailCardUrl","showField","field","getProfileData","getContactsBasicInfoQuery","Contacts","gotoScreen","podURL","setBindings","getContactsBasicInfoSource","Contact","binding","turtleFileUrl","fetchContacts","Albums","getWebIdFromPersonFileQuery","getRoleQuery","ContactDetails","contactUsername","realProps","params","contactPersonFileUrl","routingHiddenParams","contactWebId","setContactWebId","contactPodUrl","setContactPodUrl","parsedWebId","newContactPodUrl","getContactDetailsFromPersonFile","BottomNavBar","classes","btnClass","bottomNavBtn","setLocation","handleChange","newValue","BottomNavigation","appBar","showLabels","position","width","bottom","BottomNavigationAction","label","icon","MenuBar","AppBar","Toolbar","Typography","cursor","topBarRightFirstElem","IconButton","marginLeft","edge","Notification","notifMsg","notifType","Collapse","overflowY","in","Alert","severity","action","fontSize","Home","loadingAnim","setRoutingHiddenParams","history","screenPath","hiddenParams","CircularProgress","zIndex","opacity","top","showLoadingAnimation","exact","path","render","useStyles","makeStyles","fab","right","background","App","loggedIn","useHistory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.69e3a383.chunk.js","sourcesContent":["\n\nconst GITHUB_PAGE_LINK = \"https://github.com/osoc21/Reclaim-your-data\";\n\nexport {GITHUB_PAGE_LINK}; ","\nconst tempPodPattern = /https:\\/\\/(\\w+\\.)solidweb.org\\/|https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\//;\n\n/**\n * Takes a web id as parameter, and returns the pod url associated to it.\n * For inrupt PODs, this comes down to isolating a prefix of the web id.\n * For other pod providers, this might be different.\n * @param  {[type]} webId The web id of the user\n * @return {[type]}       The pod url associated with the web id\n */\nfunction getPODUrlFromWebId(webId) {\n    return webId.match(tempPodPattern)[0];\n}\n\nexport {getPODUrlFromWebId};\nexport default getPODUrlFromWebId;","\nimport {GITHUB_PAGE_LINK} from \"./constants\";\nimport \"./Login.css\";\nimport {getPODUrlFromWebId} from './pod';\nimport React from \"react\";\nimport {Button} from '@material-ui/core';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport {\n  login,\n  handleIncomingRedirect,\n  getDefaultSession,\n} from '@inrupt/solid-client-authn-browser';\n\n\n/**\n * The Login component takes care of going to the proper POD provider login page, and handles\n * the redirect after submitting the credentials. On success, the component initializes\n * the web id, the pod url and the loggin flag of the app.\n *\n * @component\n * @param {[type]} props [description]\n */\nfunction Login(props) {\n\tlet setLoggedIn = props.setLoggedIn;\n\tlet setWebId = props.setWebId;\n\tlet setPodUrl = props.setPodUrl;\n\n\tlet session = null;\n\n\t/**\n\t * Function taken from the inrupt examples.\n\t * Starts the login process by calling the login() function.\n\t * @return {[type]} The result of the login\n\t */\n\tfunction loginToInruptDotCom() {\n\t  let chosenIssuer = \"https://broker.pod.inrupt.com\";\n\t  return login({\n\t    oidcIssuer: chosenIssuer,\n\t    redirectUrl: window.location.href,\n\t    clientName: \"Getting started app\"\n\t  });\n\t}\n\n\t/** \n\t * Function taken from the inrupt examples.\n\t * When redirected after login, finish the process by retrieving session information.\n\t * This is done with the handleIncomingRedirect() function, and then using a session object.\n\t */\n\tasync function handleRedirectAfterLogin() {\n\t  await handleIncomingRedirect();\n\n\t  session = getDefaultSession();\n\n\t  if (session.info.isLoggedIn) {\n\t    // Update the page with the status.\n\t    await setLoggedIn(true);\n\t    await setWebId(session.info.webId);\n\t    let newPodUrl = getPODUrlFromWebId(session.info.webId);\n\t    await setPodUrl(newPodUrl);\n\t  }\n\t}\n\n\thandleRedirectAfterLogin();\n\n\treturn (\n\t\t\t<div className=\"login-frame\">\n\t    \t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={loginToInruptDotCom}>Log in with Inrupt.com</Button>\n\t    \t<Button size=\"small\" variant=\"outlined\" color=\"default\" style={{marginTop:\"10px\"}}\n          onClick={event =>  window.location.href=GITHUB_PAGE_LINK}\n          startIcon={<GitHubIcon/>}>\n          Go to Github page\n        </Button>\n    \t</div>\n\t);\n}\n\n\nexport default Login;","import React, {useEffect, useState, useRef} from \"react\";\nimport {fetch} from '@inrupt/solid-client-authn-browser';\nimport {getFile,    overwriteFile} from '@inrupt/solid-client';\nimport {ImageList, ImageListItem} from '@material-ui/core';\nimport dms2dec from \"dms2dec\";\nimport \"./GridView.css\";\nimport exif from 'exif-js';\n\n\n/**\n * The GridView component takes care of fetching images from the pod, getting\n * their EXIF data at the same time, and display them in a grid.\n * \n * @param {[type]} props [description]\n * @returns {JSX.Element}\n */\nfunction GridView(props) {\n    let files = props.files;\n    let setLoadingAnim = props.setLoadingAnim;\n    const [entries, setEntries] = useState([]);\n    let currentPath = props.currentPath;\n    let loadedImagesCounter = useRef(0);\n    let nbImages = useRef(0);\n\n    useEffect(() => {\n        nbImages.current = 0;\n        loadedImagesCounter.current = 0;\n\n        if (currentPath !== \"\")\n        {\n            readMetadataFile();\n        }\n    }, [files]);\n\n    /**\n     * Checks if a url is the url of a folder.\n     * @param {String} url \n     * @returns {Boolean}\n     */\n    function isFolder(url) {\n        return url.endsWith(\"/\");\n    }\n\n    /**\n     * Checks if a url is the url of an image.\n     * It currently supports .jpg/.jpeg/.png extentions.\n     * @param {String} url \n     * @returns {Boolean}\n     */\n    function isImage(url) {\n        return url.endsWith(\".jpg\") || url.endsWith(\".jpeg\") || url.endsWith(\".png\");\n    }\n\n    /**\n     * Gets the name of the deepest folder or file in the url.\n     * @param {String} url \n     * @returns {String} name of the deepest folder or file in the url\n     */\n    function getName(url) {\n        let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n        const match = url.match(regex);\n        // get last matched part in order to support nested folders\n        return match[match.length - 1];\n    }\n\n    /**\n     * Sorts files by descending dates\n     * @param {FileList} files - list of files\n     * @returns {FileList} sorted list of files\n     */\n    function sortByDate(files) {\n        return files.sort((a, b) => b.date - a.date);\n    }\n\n\n    async function readMetadataFile(){\n        let dummyMetadataFile = new File([], \"metadata.json\", {\n            type: \"application/json\"\n        }); \n        console.log(currentPath + dummyMetadataFile.name);\n        let metadataFile = await getFile(currentPath + dummyMetadataFile.name, {fetch: fetch});\n        let fileContent = await metadataFile.text();\n        const parsedContent = JSON.parse(fileContent);\n\n        if(parsedContent.length > 0){\n            console.log(\"fetchingImageData\");\n            await fetchImageData(parsedContent);\n            await setEntries(parsedContent);\n        } \n \n        sortByDate(parsedContent);\n        \n\n    }\n\n    /**\n     * Gets image file URL (Blob) and data like EXIF DateTime and potentially location from images stored on the Solid pod.\n     * @param {Object} processedEntries \n     */\n    async function fetchImageData(processedEntries) {\n        for (const entry of processedEntries) {\n            if (isImage(entry.url)) {\n                console.log(\"fetching EXIF\");\n                let raw = await getFile(entry.url, {fetch: fetch});\n                entry.imageUrl = URL.createObjectURL(raw);\n\n                if(entry.date === null){\n                    let arrayBuffer = await new Response(raw).arrayBuffer();\n                    let exifData = exif.readFromBinaryFile(arrayBuffer);\n                    if (exifData) {\n                        let dateTime = exifData.DateTime ? exifData.DateTime.replace(\":\", \"/\").replace(\":\", \"/\") : undefined\n\n                        /*\n                        This is also the place where you would extract other EXIF data like location.\n                         */\n\n                        //let latitude = exifData.GPSLatitude && exifData.GPSLatitude[0] ? exifData.GPSLatitude : null\n                        //let longitude = exifData.GPSLongitude && exifData.GPSLongitude[0] ? exifData.GPSLongitude : null\n                        //console.log(`exifdata`);\n                        //console.log(dateTime);\n                        entry.date = new Date(dateTime);\n                        if (exifData.latitude != null && exifData.longitude != null) {\n                            // note: the dms2dec lib expects 4 parameters, but we haven't found a way to parse if the picture\n                            // was taken in the NESW direction, so at the moment it's hardcoded\n                            // TODO: extract NESW direction from EXIF data\n                            //console.log(dms2dec(exifData.latitude, \"N\", exifData.longitude, \"E\"));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /** If called with a counter of loaded images higher than the size of the entries array,\n     * stops the loading animation.\n     */\n    function updateLoadingAnim() {\n        loadedImagesCounter.current += 1;\n        if (loadedImagesCounter >= nbImages) {\n            setLoadingAnim(false);\n        }\n    }\n\n    /**\n     * Makes an ImageListItem for each image.\n     * @param {Object} folderEntry - entry that needs to be rendered.\n     * @param {Number} idx - index of entry in array is used as key for React list item.\n     * @returns {ReactComponent} \n     */\n    function renderEntry(folderEntry, idx) {\n        if ((!folderEntry.isFolder) && folderEntry.imageUrl) {\n            return (<ImageListItem key={idx}>\n                <img onLoad={updateLoadingAnim} loading=\"lazy\" src={folderEntry.imageUrl} alt={folderEntry.imageUrl}/>\n            </ImageListItem>);\n        }\n        return null;\n    }\n\n    /**\n     * Renders the ImageList with ImageListItems to be shown in the app.\n     */\n    return (\n        <div className=\"grid-view\">\n            <ImageList rowHeight={160} cols={4}>\n                {entries.map((folderEntry, index) => renderEntry(folderEntry, index))}\n            </ImageList>\n        </div>\n    );\n}\n\nexport default GridView;","import React, {useEffect, useState} from \"react\";\nimport GridView from \"./GridView\";\nimport \"./FileExplorer.css\"\nimport {fetch} from '@inrupt/solid-client-authn-browser';\nimport {getSolidDataset, getThingAll} from '@inrupt/solid-client';\nimport {Container} from '@material-ui/core';\n\nfunction FileExplorer(props) {\n    const POD_URL = props.podUrl;\n\n    let [files, setFiles] = useState([]);\n\n    let setLoadingAnim = props.setLoadingAnim;\n    let currentPath = props.explorerPath;\n    let setCurrentPath = props.setExplorerPath;\n\n    function openFolder(url) {\n        setLoadingAnim(true);\n        // its important to set the current path first !!\n        getFilesFromResourceURL(url).then((fileArray) => {\n            setCurrentPath(url);\n            setFiles(fileArray);\n            setLoadingAnim(false);\n        });\n    }\n\n\n    async function getFilesFromResourceURL(url) {\n        const fetchedFiles = await getSolidDataset(url, {fetch: fetch});\n        let children = await getThingAll(fetchedFiles);\n\n        let res = []\n\n        // note: the first child element is self\n        if (children.length > 1) {\n            res = children.slice(1, children.length)\n        }\n\n        return res;\n    }\n\n\n    /** Fetch all files from the given path given relative to the root */\n    async function getRootFiles() {\n        await setLoadingAnim(true);\n        getFilesFromResourceURL(POD_URL).then((fileArray) => {\n            setCurrentPath(POD_URL);\n            setFiles(fileArray);\n        });\n    }\n\n    useEffect(() => {\n        if (POD_URL !== \"\") {\n            getRootFiles();\n        }\n    }, [POD_URL]);\n\n\n    return (\n        <Container id=\"file-explorer\" disableGutters=\"true\">\n            <GridView files={files} openFolder={openFolder} setLoadingAnim={setLoadingAnim} currentPath={currentPath}/>\n        </Container>\n    );\n}\n\nexport default FileExplorer;\n","import \"./FileUpload.css\"\nimport React, {useState} from \"react\"\nimport {\n    saveFileInContainer,\n    getFile,\n    overwriteFile\n} from '@inrupt/solid-client';\n\nimport {\n    fetch\n} from '@inrupt/solid-client-authn-browser';\n\nimport Button from '@material-ui/core/Button';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport SendIcon from '@material-ui/icons/Send';\n\n/**\n * The file upload component allows the user to select files, and once done,\n * display the upload button that can be clicked on the send the files on the POD.\n *\n * @component\n * @param {[type]} props The current path url (string), the notification message and type (strings)\n * and the loading animation status (bool).\n * @returns {JSX.Element}\n */\nfunction FileUpload(props) {\n    let currentPath = props.explorerPath;\n    let [selectedFiles, setSelectedFiles] = useState([]);\n    let setNotifMsg = props.setNotifMsg;\n    let setNotifType = props.setNotifType;\n    let setLoadingAnim = props.setLoadingAnim;\n\n    /**\n     * Calls placeFileInContainer for each selected file,\n     * placing all the Promises in an array before waiting for them to \n     * finish. Once all async operations are completed, the function checks if any of them\n     * failed, and if so, displays an error notification. If every operation succeeds, displays\n     * a success notification.\n     * \n     * @async\n     */\n    async function upload() {\n        let promiseArray = [];\n        await setLoadingAnim(true);\n\n        for (let file of selectedFiles) {\n            promiseArray.push(placeFileInContainer(file, currentPath));\n        }\n        let promiseResults = await Promise.all(promiseArray);\n        let errorMsg = \"\";\n\n        for (let i = 0; i < promiseResults.length; ++i) {\n            let res = promiseResults[i];\n\n            // promise is undefined if the upload wasn't successful\n            if (!res) {\n                errorMsg += \"'\" + selectedFiles[i].name + \"'\";\n            }\n        }\n\n        await setLoadingAnim(false);\n\n        // there is an error or more\n        if (errorMsg !== \"\") {\n            await setNotifType(\"error\");\n            await setNotifMsg(\"Could not upload file(s). The file(s) might already exist: \" + errorMsg);\n        } else if (selectedFiles.length > 0) {\n            await setNotifType(\"success\");\n            await setNotifMsg(\"Files successfully uploaded !!\");\n            await updateMetadataFile(selectedFiles);\n        } else if (selectedFiles.length === 0) {\n            await setNotifType(\"info\");\n            await setNotifMsg(\"Nothing to upload.\");\n        }\n    }\n\n    /**\n     * Return an object with keys **date**, **isFolder**, **imageUrl**, **shortName**, **url**.\n     *\n     * @param file {File} `File object.`\n     * @returns {{date: Date, isFolder: boolean, imageUrl: string, shortName: string, url: string}} `JS Object`\n     */\n    function makeMetaDataEntry(file) {\n        /**\n         * Return the name of the file associated with the provided URL.\n         *\n         * @param url {string} `URL to the file.`\n         * @returns {string} `Name of file.`\n         */\n        function getName(url) {\n            let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n            const match = url.match(regex);\n            return match[match.length - 1];\n        }\n\n        /**\n         * Checks whether or not the provided URL is a folder.\n         *\n         * @param url {string} `URL`\n         * @returns {boolean} boolean\n         */\n        function isFolder(url) {\n            return url.endsWith(\"/\");\n        }\n\n        let fileUrl = currentPath + file.name;\n        let metadataEntry = {\n            url: fileUrl,\n            shortName: getName(fileUrl),\n            isFolder: isFolder(fileUrl),\n            imageUrl: null,\n            date: null\n        };\n        return metadataEntry;\n    }\n\n    /**\n     * Return a metadata.json file containing the entries of the files in the pod.\n     *\n     * @param jsObjects {Object[]}\n     * @returns {File} File\n     */\n    function makeMetadataFile(jsObjects) {\n        // parse the incoming JS objects to a string for the File API\n        const jsonString = `${JSON.stringify(jsObjects)}`;\n        return new File([jsonString], \"metadata.json\", {\n            type: \"application/json\"\n        });\n    }\n\n    /**\n     * Update the entries in metadata.json file with newly uploaded files to the pod.\n     *\n     * @async\n     * @returns {void} void\n     * @param {[File]} newFileEntries `Array of File to add.`\n     */\n    async function updateMetadataFile(newFileEntries) {\n        let processedEntries = Array.from(newFileEntries).map(entry => makeMetaDataEntry(entry));\n        let metadataFile = makeMetadataFile(processedEntries);\n        let file = await getFile(currentPath + metadataFile.name, {fetch: fetch});\n        let fileContent = await file.text();\n\n        const prevContent = JSON.parse(fileContent);\n        const newContent = [...prevContent, ...processedEntries];\n        const resContent = await Promise.all(newContent);\n        const newMetadataFile = makeMetadataFile(resContent);\n        const savedFile = await overwriteFile(\n            currentPath + newMetadataFile.name,\n            newMetadataFile,\n            {\n                slug: newMetadataFile.name,\n                contentType: newMetadataFile.type,\n                fetch: fetch\n            });\n    }\n\n    /**\n     * Upload file into the targetContainer.\n     * \n     * @async\n     * @param  {[type]} file               A javascript File object\n     * @param  {[type]} targetContainerURL The url of the POD container where the file should be placed\n     * @return {[string]}                  The name of the file\n     */\n    async function placeFileInContainer(file, targetContainerURL) {\n        try {\n            const savedFile = await saveFileInContainer(\n                targetContainerURL,           // Container URL\n                file,                         // File\n                {\n                    slug: file.name,\n                    contentType: file.type, fetch: fetch\n                }\n            );\n            return file.name;\n        } catch (error) {\n            //console.log(\"ERROR CAUGHT:\", error);\n            // Any error is handled in the UI, no need to print it to the console.\n        }\n    }\n\n    /**\n     * Triggers a click event on the input[type=\"file\"] element so that\n     * the associated file selecion dialog can open.\n     * @returns void\n     */\n    function openFileSelectionWindow() {\n        document.querySelector(\"#file-input\").click();\n    }\n\n    /**\n     * Convert the selected files to upload to an array of JSX.Element.\n     * Note that the `<li>` is **NOT** HTML, but a JSX.Element.\n     *\n     * @returns {[JSX.Element]} Array of JSX.Element.\n     */\n    function selectedFilesToReact() {\n        let res = [];\n        let i = 0;\n        // selectedFiles is iterable but not an array, \n        // so map() and forEach() functions don't work\n        for (let file of selectedFiles) {\n            res.push(<li key={i}>{file.name}</li>);\n            ++i;\n        }\n\n        return res;\n    }\n\n    /**\n     * Displays the list of selected files as well as a button to send them\n     * to the POD. This returned component will be displayed only if\n     * file(s) were selected beforehand.\n     * @return {JSX.Element} A div element containing the selected file(s) list and the upload button\n     */\n    function showUploadSection() {\n        return (\n            <div className=\"upload-section\">\n                <h4>Selected files:</h4>\n                <ul>{selectedFilesToReact()}</ul>\n                <Button variant=\"contained\" color=\"primary\" onClick={upload}\n                        endIcon={<SendIcon/>}>Upload</Button>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Upload files</h1>\n            <h4>Destination:</h4>\n            <p>{currentPath}</p>\n            <Button variant=\"contained\" color=\"primary\" onClick={openFileSelectionWindow}\n                    startIcon={<CloudUploadIcon/>}>\n                Select file(s)\n            </Button>\n            {selectedFiles.length > 0 ? showUploadSection() : null}\n            <input id=\"file-input\" type=\"file\" multiple=\"multiple\"\n                   name=\"fileUploadInput\"\n                   className=\"file-selection\"\n                   accept=\"image/*\"\n                   onChange={(e) => {\n                       setSelectedFiles(e.target.files);\n                   }}/>\n        </div>\n    );\n}\n\nexport default FileUpload;\n","import { React } from \"react\";\nimport rdfParser from \"rdf-parse\";\nimport { Store } from \"n3\";\n\nconst newEngine = require('@comunica/actor-init-sparql').newEngine;\nconst queryEngine = newEngine();\n\n/**\n * Takes a RDF query and a list of source urls, and executes the query on them\n * before returning bindings for the results.\n * The session object is needed to avoid errors with the header content type.\n * @param  {[type]} query   The query to execute\n * @param  {[type]} sources The source urls, pointing to turtle files\n * @param  {[type]} session A session object reference\n * @return {[type]}         The result bindings\n */\nasync function executeQuery (query, sources, session) {\n    const comunicaSources = [];\n\n    for (let sourceFile of sources) {\n        const store = new Store();\n        const response = await session.fetch(sourceFile, { method: 'get' });\n        const textStream = require('streamify-string')(await response.text());\n        const contentType = response.headers.get('Content-Type');\n        console.log(\"Content type:\", contentType);\n        // const strippedUrl = sourceFile.split(\"#\")[0];\n        await new Promise((resolve, reject) => {\n            rdfParser.parse(textStream, { contentType: contentType.split(';')[0], baseIRI: sourceFile })\n            .on('data', (quad) => { console.log('QUAD', quad, store); store.addQuad(quad) })\n            .on('error', (error) => reject(error))\n            .on('end', async () => {resolve()})\n        });\n        comunicaSources.push({ type: 'rdfjsSource', value: store });\n    }\n\n    const result = await queryEngine.query(query, {sources: comunicaSources});\n\n    // Consume results as an array (easier)\n    const bindings = await result.bindings();\n\n    // Log metadata containing source-level provenance information\n    const metadata = await result.metadata();\n    console.log(metadata)\n\n    return bindings;\n}\n\n\nexport  {executeQuery};","\nimport React, {useState, useEffect}from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport {useSession} from \"@inrupt/solid-ui-react\";\nimport { VCARD, SCHEMA_INRUPT } from \"@inrupt/vocab-common-rdf\";\nimport { fetch } from \"@inrupt/solid-client-authn-browser\";\n// Import from \"@inrupt/solid-client\"\nimport {\n  getSolidDataset,\n  getThing,\n  getStringNoLocale,\n  getUrlAll\n} from \"@inrupt/solid-client\";\n\nconst getRoleQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#role> ?o }\";\nconst getPODProviderUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/ns/solid/terms#oidcIssuer> ?o }\";\nconst getEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#hasEmail> ?o }\";\n// using email card url\nconst getEmailFromEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n\n/**\n * The Profile component displays the information about the current logged-in user.\n * The information includes the web id, the pod url, the role, the username and the email.\n * Other information might be considered in the future, like the POD provider or phone numbers\n * and the like.\n *\n * @component\n * @param {[type]} props The webid (string) and the pod url (string)\n */\nfunction Profile(props)\n{\n\tconst WEB_ID = props.webId;\n\tconst POD_URL = props.podUrl;\n\tlet [username, setUsername] = useState(\"\"); //data.public;\n\tlet [role, setRole] = useState(\"\");\n\tlet [email, setEmail] = useState(\"\");\n\n\tconst { session } = useSession();\n\n\tuseEffect(() => {\n\t\tgetProfileData();\n\t}, [POD_URL]);\n\n\t/**\n\t * Simple convenience function that parses a single result in the bindings of a query.\n\t * Ideally, this function should be replaced by functions from the inrupt client API (e.g. getThing).\n\t * @param  {[type]} bindings The results of the query, from which the result should be parsed\n\t * @return {[type]}          The parsed result\n\t */\n\tfunction parseSingleResult(bindings)\n\t{\n\t\treturn bindings[0]['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\t}\n\n\t/**\n\t * Fetch the data of the user using the web id. The function is currently a mixture\n\t * of inrupt API functions and custom queries for the email.\n\t */\n\tasync function getProfileData()\n\t{\n\t\tconst profileDocumentURI = WEB_ID.split('#')[0];\n\n\t\t// Use `getSolidDataset` to get the Profile document.\n\t\t// Profile document is public and can be read w/o authentication; i.e.: \n\t\t// - You can either omit `fetch` or \n\t\t// - You can pass in `fetch` with or without logging in first. \n\t\t//   If logged in, the `fetch` is authenticated.\n\t\t// For illustrative purposes, the `fetch` is passed in.\n\t\tconst myDataset = await getSolidDataset(profileDocumentURI, { fetch: session.fetch });\n\n\t\tconsole.log(\"dataset:\", myDataset);\n\t\t// Get the Profile data from the retrieved SolidDataset\n\t\tconst profile = getThing(myDataset, WEB_ID);\n\t\tconsole.log(\"profile:\", profile);\n\t\t// Get the formatted name using `VCARD.fn` convenience object.\n\t\t// `VCARD.fn` includes the identifier string \"http://www.w3.org/2006/vcard/ns#fn\".\n\t\t// As an alternative, you can pass in the \"http://www.w3.org/2006/vcard/ns#fn\" string instead of `VCARD.fn`.\n \n\t\tconst parsedUsername = getStringNoLocale(profile, VCARD.fn);\n\n\t\t// Get the role using `VCARD.role` convenience object.\n\t\t// `VCARD.role` includes the identifier string \"http://www.w3.org/2006/vcard/ns#role\"\n\t\t// As an alternative, you can pass in the \"http://www.w3.org/2006/vcard/ns#role\" string instead of `VCARD.role`.\n\n\t\tconst parsedRole = getStringNoLocale(profile, VCARD.role);\n\n\t\t// let parsedEmail = getUrlAll(profile, SCHEMA_INRUPT.email);\n\t\t// console.log(\"parsed email:\", parsedEmail);\n\t\tlet parsedEmail = null;\n\t\tlet resBindings = await executeQuery(getEmailCardUrlQuery, [WEB_ID], session);\n\t\tconsole.log(\"email card url res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t\t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t\t\tconsole.log(\"email res:\", resBindings);\n\t\t\tif (resBindings.length > 0)\n\t\t\t{\n\t\t\t\tparsedEmail = parseSingleResult(resBindings);\n\t\t\t}\n\t\t}\n\t\tsetUsername(parsedUsername);\n\t\tsetRole(parsedRole);\n\t\tsetEmail(parsedEmail);\n\t\t// return {username: parsedUsername, role: parsedRole};\n\t}\n\n\n\t// async function getDetailsFromWebId()\n\t// {\n\t// \tlet resBindings = await executeQuery(getRoleQuery, [WEB_ID], session);\n\t// \tconsole.log(\"role res:\", resBindings);\n\t// \tif (resBindings.length > 0)\n\t// \t{\n\t// \t\tlet parsedRole = parseSingleResult(resBindings);\n\t// \t\tsetRole(parsedRole);\n\t// \t}\n\t// \tresBindings = await executeQuery(getEmailCardUrlQuery, [WEB_ID], session);\n\t// \tconsole.log(\"email card url res:\", resBindings);\n\t// \tif (resBindings.length > 0)\n\t// \t{\n\t// \t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t// \t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t// \t\tconsole.log(\"email res:\", resBindings);\n\t// \t\tif (resBindings.length > 0)\n\t// \t\t{\n\t// \t\t\tlet parsedEmail = parseSingleResult(resBindings);\n\t// \t\t\tsetEmail(parsedEmail);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t/**\n\t * This functions displays a <p> element containing the argument if defined,\n\t * otherwise returns a <p> element containing a dash character.\n\t * @param  {[type]} field A value to display\n\t * @return {[type]}       A <p> element containing either field or a dash\n\t */\n\tfunction showField(field)\n\t{\n\t\treturn (<p>{field ? field : \"-\"}</p>);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Contact page of {username}</h1>\n\t\t\t<h4>WebId:</h4>\n\t\t\t{showField(WEB_ID)}\n\t\t\t<h4>POD url</h4>\n\t\t\t{showField(POD_URL)}\n\t\t\t<h4>Email:</h4>\n\t\t\t{showField(email)}\n\t\t\t<h4>Role</h4>\n\t\t\t{showField(role)}\n\t\t</>\n\t);\n}\n\nexport default Profile;","import {useState, React, useEffect} from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport \"./Contacts.css\";\nimport {useSession} from \"@inrupt/solid-ui-react\";\nimport PersonIcon from '@material-ui/icons/Person';\n\nconst getContactsBasicInfoQuery = \"SELECT ?s ?o WHERE {?s <http://www.w3.org/2006/vcard/ns#fn> ?o}\";\n\n/**\n * The Contacts components gathers the contacts of the current user.\n * The contacts are fetched using a simple rdf query, storing the results in a state variable.\n *\n * @component\n * @param {[type]} props The webId (string), the gotoScreen function and the podUrl (string)\n */\nfunction Contacts(props) {\n    let webId = props.webId;\n    let gotoScreen = props.gotoScreen;\n    let podURL = props.podUrl;\n\n    const {session} = useSession();\n    const [bindings, setBindings] = useState([]);\n\n    /**\n     * Uses the pod url to fetch the people.ttl turtle file on the POD, subsequently being able\n     * to query the file for contact names and their associated 'person-files'.\n     * The result bindings are stored in a state variable. \n     */\n    async function fetchContacts() {\n        let getContactsBasicInfoSource = podURL + \"contacts/people.ttl#this\";\n        let resBindings = await executeQuery(getContactsBasicInfoQuery, [getContactsBasicInfoSource], session);\n        await setBindings(resBindings);\n    }\n\n    useEffect(() => {\n        fetchContacts();\n    }, [webId]);\n\n    /**\n     * The Contact component encapsulates the name of the user and it 'person-file' url,\n     * and allows the user to click on it to display more data about the contact.\n     * When clicked, a page switch is triggered by changing the path of the router\n     * and parameterize it with the name of the person.\n     * Notice that the person-file url is actually used to get the contact details, but is passed\n     * to the router in a hidden way to have a clearer url displayed in the browser and avoid unescaped\n     * character problems.\n     * @param {[type]} props The bindings of the result\n     * @return {[type]} A div component containing an icon (ideally a profile pic) and the name of the contact,\n     * which can be clicked on to move to the contact details page\n     */\n    function Contact(props) {\n        let binding = props.binding;\n\n        let username = binding['_root'].entries[1][1]['id'].replace(/['\"]+/g, '');\n        let turtleFileUrl = binding['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\n        return (\n            <div className=\"contact\">\n                <PersonIcon/>\n                <p className=\"contact-name\"\n                   onClick={() => gotoScreen(`/contacts/${username}`, [turtleFileUrl])}>{username}</p>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Contacts</h1>\n            {bindings.map((binding, idx) => {\n                console.log(\"Binding:\", binding);\n                return (<Contact key={idx} binding={binding}/>)\n            })}\n        </div>\n    );\n}\n\nexport default Contacts;","\nimport React from \"react\";\n\n/**\n * The Albums component displays folder like structures that gather\n * images according to tags or location on the POD. Consequently, the implementation\n * of the component is heavily implementation dependent: files can be grouped\n * according to their parent folder on the POD, or according to index files\n * and dynamic faceted search algorithms. Currently, the Albums component is filled with dummy\n * data.\n *\n * @component\n * @param {[type]} props [description]\n */\nfunction Albums(props)\n{\n\treturn (\n\t\t<>\n\t\t\t<h1>Albums</h1>\n\t\t\t<h2>Your albums</h2>\n\t\t\t<p>album1</p>\n\t\t\t<p>album1</p>\n\t\t</>\n\t);\n}\n\nexport default Albums;","import React, {useState, useEffect} from \"react\";\nimport {executeQuery} from \"./rdf\";\nimport {getPODUrlFromWebId} from './pod';\nimport {useSession} from \"@inrupt/solid-ui-react\";\n\n// using person file as source\nconst getWebIdFromPersonFileQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n// using webid as source\nconst getRoleQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#role> ?o }\";\n// const getPODProviderUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/ns/solid/terms#oidcIssuer> ?o }\";\nconst getEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#hasEmail> ?o }\";\n// using email card url\nconst getEmailFromEmailCardUrlQuery = \"SELECT ?o WHERE { ?s <http://www.w3.org/2006/vcard/ns#value> ?o }\";\n\n/**\n * The ContactDetails component gathers information about a given contact.\n * The data is fetched from the POD using a 'person-file' url received from the parent\n * Contacts component. Note that this file url is not received as a prop of the router which\n * has to pass by the url, but as a hidden state variable of the app.\n *\n * @component\n * @param {[type]} props [description]\n */\nfunction ContactDetails(props)\n{\n\tlet contactUsername = props.realProps.match.params.username; //data.public;\n\tlet contactPersonFileUrl = props.routingHiddenParams[0]; //data.hidden;\n\tlet [contactWebId,setContactWebId] = useState(\"\");\n\tlet [contactPodUrl, setContactPodUrl] = useState(\"\");\n\tlet [role, setRole] = useState(\"\");\n\tlet [email, setEmail] = useState(\"\");\n\n\tconst { session } = useSession();\n\n\t/**\n\t * Simple convenience function that parses a single result in the bindings of a query.\n\t * Ideally, this function should be replaced by functions from the inrupt client API (e.g. getThing).\n\t * @param  {[Object]} bindings The results of the query, from which the result should be parsed\n\t * @return {[string]}          The parsed result\n\t */\n\tfunction parseSingleResult(bindings)\n\t{\n\t\treturn bindings[0]['_root'].entries[0][1]['id'].replace(/['\"]+/g, '');\n\t}\n\n\t/**\n\t * This function use hardcoded predicates to query the person file and get information\n\t * like the role, email or webid of a contact. This function could be refactored\n\t * to use functions and vocabulary (e.g. VCARD) from the inrupt library.\n\t */\n\tasync function getContactDetailsFromPersonFile()\n\t{\n\t\tlet resBindings = await executeQuery(getWebIdFromPersonFileQuery, [contactPersonFileUrl], session);\n\t\tlet parsedWebId = parseSingleResult(resBindings);\n\t\t//console.log(\"parsed contact webid:\", parsedWebId);\n\t\tsetContactWebId(parsedWebId);\n\t\tlet newContactPodUrl =  getPODUrlFromWebId(parsedWebId);\n\t\tsetContactPodUrl(newContactPodUrl);\n\t\tresBindings = await executeQuery(getRoleQuery, [parsedWebId], session);\n\t\t//console.log(\"role res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedRole = parseSingleResult(resBindings);\n\t\t\tsetRole(parsedRole);\n\t\t}\n\t\tresBindings = await executeQuery(getEmailCardUrlQuery, [parsedWebId], session);\n\t\t//console.log(\"email card url res:\", resBindings);\n\t\tif (resBindings.length > 0)\n\t\t{\n\t\t\tlet parsedEmailCardUrl = parseSingleResult(resBindings);\n\t\t\tresBindings = await executeQuery(getEmailFromEmailCardUrlQuery, [parsedEmailCardUrl], session);\n\t\t\t//console.log(\"email res:\", resBindings);\n\t\t\tif (resBindings.length > 0)\n\t\t\t{\n\t\t\t\tlet parsedEmail = parseSingleResult(resBindings);\n\t\t\t\tsetEmail(parsedEmail);\n\t\t\t}\n\t\t}\n\t\t// let email =\n\t}\n\n\tuseEffect(() => {\n\t\tgetContactDetailsFromPersonFile();\n\t}, [contactPersonFileUrl]);\n\t\n\t/**\n\t * This functions displays a <p> element containing the argument if defined,\n\t * otherwise returns a <p> element containing a dash character.\n\t * @param  {[type]} field A value to display\n\t * @return {[type]}       A <p> element containing either field or a dash\n\t */\n\tfunction showField(field)\n\t{\n\t\treturn (<p>{field ? field : \"-\"}</p>);\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Contact page of {contactUsername}</h1>\n\t\t\t<h4>Person file url:</h4>\n\t\t\t{showField(contactPersonFileUrl)}\n\t\t\t<h4>WebId:</h4>\n\t\t\t{showField(contactWebId)}\n\t\t\t<h4>POD url</h4>\n\t\t\t{showField(contactPodUrl)}\n\t\t\t<h4>Email:</h4>\n\t\t\t{showField(email)}\n\t\t\t<h4>Role</h4>\n\t\t\t{showField(role)}\n\t\t</>\n\t);\n}\n\nexport default ContactDetails;","\nimport React, {useState} from \"react\";\nimport {BottomNavigation, BottomNavigationAction} from '@material-ui/core';\nimport PhotoIcon from '@material-ui/icons/Photo';\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport GroupIcon from '@material-ui/icons/Group';\n\n\n/**\n * The BottomNavBar component extends a material-ui BottomNavigation component\n * to support routing in a fixed bar at the bottom of the screen.\n * This allows the app to navigate between pages while having a flexible\n * approach, especially for simple and intuitive mobile navigation.\n *\n * @component\n * @param {[type]} props [description]\n */\nfunction BottomNavBar(props) {\n    let classes = props.classes;\n    let btnClass = classes.bottomNavBtn;\n    let gotoScreen = props.gotoScreen;\n    let [location, setLocation] = useState(\"/\");\n\n    /**\n     * Event handler called each time that the bottom navigation is clicked and a page switch\n     * should take place. The gotoScreen function is then called and the the focus of the bottom\n     * navigation is updated.\n     * @param  {[type]} event    The change event for the bottom navigation element\n     * @param  {[string]} newValue The new string value of the bottom navigation, which is the new path for the router\n     */\n    const handleChange = async (event, newValue) => {\n        await setLocation(newValue);\n        await gotoScreen(newValue)\n    };\n\n    return (\n        <BottomNavigation className={classes.appBar} value={location} onChange={handleChange}\n                          showLabels style={{position: 'fixed', width: \"100%\", bottom: 0}}>\n            <BottomNavigationAction className={btnClass} value=\"/\" label=\"Photos\" icon={<PhotoIcon/>}/>\n            <BottomNavigationAction className={btnClass} value=\"/albums\" label=\"Albums\" icon={<FolderIcon/>}/>\n            <BottomNavigationAction className={btnClass} value=\"/profile\" label=\"Profile\" icon={<AccountBoxIcon/>}/>\n            <BottomNavigationAction className={btnClass} value=\"/contacts\" label=\"Contacts\" icon={<GroupIcon/>}/>\n        </BottomNavigation>\n    );\n}\n\nexport default BottomNavBar;","\nimport {GITHUB_PAGE_LINK} from \"./constants\";\n\nimport React from \"react\";\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\n\n/**\n * The MenuBar component represent a sticky bar at the top of the app, including\n * a label and ideally a logo in the future. The bar should also include quick access \n * functionnalities, which are currently limited to a button opening the file upload page.\n * @param {[type]} props [description]\n */\nfunction MenuBar(props) {\n    let classes = props.classes;\n    let gotoScreen = props.gotoScreen;\n\n    return (\n        <AppBar position=\"sticky\" className={classes.appBar}>\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\">\n                    WePod\n                </Typography>\n                <GitHubIcon style={{cursor: \"pointer\"}} className={classes.topBarRightFirstElem} \n                onClick={event =>  window.location.href=GITHUB_PAGE_LINK}/>\n                <IconButton style={{color: \"white\", marginLeft: \"10px\"}} edge=\"start\"\n                            aria-label=\"menu\" onClick={async () => {\n                    await gotoScreen('/upload')\n                }}>\n                    <AddIcon/>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default MenuBar;","\nimport React from \"react\";\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\n/**\n * The Notification component implements the UI and logic for notifications,\n * displaying the proper notification message prop depending on the notification type prop.\n * Note that the notification type should be a string accepted by the material-ui Alert component.\n *\n * @see {@link https://material-ui.com/components/alert/}\n * @param {[type]} props A valid Alert type (string), a notification message (string) and a setter function\n * for the message.\n */\nfunction Notification(props) {\n    let notifMsg = props.notifMsg;\n    let notifType = props.notifType;\n    let setNotifMsg = props.setNotifMsg;\n\n    return (<Collapse style={{overflowY: \"scroll\"}} in={(notifMsg !== \"\" && notifType !== \"\")}>\n        <Alert severity={notifType} action={\n            <IconButton\n                aria-label=\"close\"\n                color=\"inherit\"\n                size=\"small\"\n                onClick={() => {\n                    setNotifMsg(\"\");\n                }}>\n                <CloseIcon fontSize=\"inherit\"/>\n            </IconButton>}>\n            {notifMsg}\n        </Alert>\n    </Collapse>);\n}\n\nexport default Notification;","\nimport FileExplorer from \"./FileExplorer\";\nimport FileUpload from \"./FileUpload\";\nimport Profile from \"./Profile\";\nimport Contacts from \"./Contacts\";\nimport Albums from \"./Albums\";\nimport ContactDetails from \"./ContactDetails\";\nimport BottomNavBar from \"./BottomNavBar\";\nimport MenuBar from \"./MenuBar\";\nimport Notification from \"./Notification\";\n\nimport React, {useState} from \"react\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { Switch, Route } from \"react-router-dom\";\n\n\n/**\n * The Home component handles the application logic and UI once logged-in to access the POD. The component\n * relies on react router to switch between pages, with the root being the image gallery. The component\n * also contains menu bars to interact with the content, and can display notifications and loading animations.\n *\n * @component\n * @param {[type]} props [description]\n */\nfunction Home(props) {\n    /**\n     * State containing notification messages.\n     */\n    let [notifMsg, setNotifMsg] = useState(\"\");\n\n    /**\n     * State containing the notification type, which should be a string value accepted\n     * by the material UI Alert component (\"error\", \"info\", \"warning\", \"success\").\n     *\n     * @see {@link https://material-ui.com/components/alert/}\n     * \n     */\n    let [notifType, setNotifType] = useState(\"info\");\n\n    /**\n     * Boolean state telling whether or not a loading animation is to be displayed.\n     */\n    let [loadingAnim, setLoadingAnim] = useState(false);\n\n    /**\n     * State containing hidden routing parameters.\n     */\n    let [routingHiddenParams, setRoutingHiddenParams] = useState([]);\n\n    let webId = props.webId;\n    let podUrl = props.podUrl;\n    let explorerPath = props.explorerPath;\n    let setExplorerPath = props.setExplorerPath;\n    let history = props.history;\n\n    const classes = props.classes;\n\n   \n    /**\n     * This function changes the route that should be taken by the router by appending\n     * the new path to the browser history, and cancels any loading animation running.\n     * Hidden parameters can also be passed to the function\n     * without being exposed in the url (displayed in the browser). This is particularly useful\n     * when the data contains sepcial characters that could mess with the routing (e.g. ':', '#' or '/')\n     * or when the parameter is too long and makes it difficult to debug the routing by looking at the \n     * browser url. Notice that if hiddenParams is not empty, it means that the page we want to load\n     * expects these parameters to be set beforehand, hence we first set the hidden parameters\n     * before initiating the page switch. On the other hand, if the hiddenParams is null,\n     * then we first want to render the new page before assigning null to the routingHiddenParams state.\n     * This is because the previous page might have a prop that references the routingHiddenParam state,\n     * hence setting it to null while the component is still there would generate an error.\n     * @param  {[type]}  screenPath               The new path for the router, pushed to the history\n     * @param  {[type]}  hiddenParams             Params that will be used by the new page, but don't go in the path url\n     */\n    async function gotoScreen(screenPath, hiddenParams = null) {\n        // hiddenParams is defined and not null\n        // ==> update the state before moving to the new page\n        if (hiddenParams) {\n            await setRoutingHiddenParams(hiddenParams);\n        }\n\n        await setLoadingAnim(false); // always cancel loading anim when switching screen\n        history.push(`${screenPath}`);\n\n        // hiddenParams is null, so we set it after the page change\n        if (! hiddenParams) {\n            await setRoutingHiddenParams(null);\n        }\n    }\n\n    /**\n     * Displays a fixed loading animation centered on the screen when the loadingAnim state is set to true.\n     * The animation is top level, hence it has a z-index higher than the other components, and it floats\n     * as the user scrolls the page.\n     *\n     * @see {@link https://material-ui.com/api/circular-progress/}\n     * @return {[CircularProgress]}  A styled material-ui CircularProgress element\n     */\n    function showLoadingAnimation() {\n        if (loadingAnim) {\n            return <CircularProgress color=\"secondary\" size={100}\n                    style={{zIndex: 1700, opacity: \".7\", position: \"fixed\", top: \"45vh\"}}/>\n        }\n    }\n\n\n    return (<>\n        {showLoadingAnimation()}\n        <MenuBar classes={classes} history={history} gotoScreen={gotoScreen}/>\n        <Notification setNotifMsg={setNotifMsg} notifMsg={notifMsg} notifType={notifType}/>\n        <div className=\"content\">\n            <Switch>\n                <Route exact path=\"/upload\">\n                    <FileUpload explorerPath={explorerPath} setNotifMsg={setNotifMsg}\n                                setNotifType={setNotifType} setLoadingAnim={setLoadingAnim}/>\n                </Route>\n                <Route exact path=\"/profile\">\n                    <Profile webId={webId} podUrl={podUrl}/>\n                </Route>\n                <Route exact path=\"/contacts\">\n                    <Contacts gotoScreen={gotoScreen} podUrl={podUrl}/>\n                </Route>\n                <Route path=\"/contacts/:username\"\n                       render={(props) => <ContactDetails routingHiddenParams={routingHiddenParams} realProps={props}/>}/>\n                <Route exact path=\"/albums\">\n                    <Albums/>\n                </Route>\n                <Route exact path=\"/\">\n                    <FileExplorer podUrl={podUrl} explorerPath={explorerPath}\n                                  setExplorerPath={setExplorerPath} setLoadingAnim={setLoadingAnim}/>\n                </Route>\n            </Switch>\n        </div>\n        <BottomNavBar classes={classes} gotoScreen={gotoScreen}/>\n    </>);\n}\n\nexport default Home;","\n\nimport './App.css';\nimport Login from \"./Login\";\nimport Home from \"./Home\";\n\nimport React, {useState, useEffect} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n\n// Style I want for fab, can add more - it's just a JS object\nconst useStyles = makeStyles({\n    fab: {\n        position: \"fixed\",\n        right: \"10px\",\n        bottom: \"10px\",\n    },\n    topBarRightFirstElem: {\n        marginLeft: 'auto',\n    },\n    appBar: {\n        background: 'rgba(0,0,0,0.9)',\n    },\n    bottomNavBtn: {\n        color: \"grey\",\n        \"&$selected\": {\n            color: \"red\"\n        }\n    }\n});\n\n\n/**\n * The App component displays a Login page from which the user can login to a POD.\n * One logged-in, the App will display the home screen instead.\n *\n * @component\n */\nfunction App() {\n    /**\n     * State telling if the user is logged in or not.\n     */\n    let [loggedIn, setLoggedIn] = useState(false);\n\n    /**\n     * The web id of the user.\n     */\n    let [webId, setWebId] = useState(\"\");\n\n    /**\n     * The url of the user's POD.\n     */\n    let [podUrl, setPodUrl] = useState(\"\");\n\n    /**\n     * Current path in the file explorer, which can be used when sub-folders\n     * can be navigated.\n     */\n    let [explorerPath, setExplorerPath] = useState(\"\");\n\n    let history = useHistory();\n    const classes = useStyles();\n\n    useEffect(() => {\n        setExplorerPath(podUrl);\n    }, [podUrl]);\n\n    /**\n     * Returns true if the user is logged in and the web id is set.\n     * @return {Boolean} The login status\n     */\n    function isLoggedIn() {\n        return (webId !== \"\") && loggedIn;\n    }\n\n    /**\n     * Convenience function that creates the login component.\n     * @return {[type]} The login component\n     */\n    function getLoginComponent() {\n        return (<>\n                <Login setWebId={setWebId} setLoggedIn={setLoggedIn} setPodUrl={setPodUrl}/>\n                </>);\n    }\n\n    /**\n     * Convenience function that creates the home component.\n     * @return {[type]} [description]\n     */\n    function getHomeComponent() {\n        return <Home classes={classes}\n                     webId={webId} podUrl={podUrl}\n                     history={history}\n                     explorerPath={explorerPath}\n                     setExplorerPath={setExplorerPath}/>;\n    }\n\n\n    return (\n        <div className=\"app-div\">\n            {isLoggedIn() ? getHomeComponent() : getLoginComponent()}\n        </div>\n    );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}