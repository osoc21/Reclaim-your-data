{"version":3,"sources":["Login.js","GridView.js","pod.js","FileExplorer.js","FileUpload.js","App.js","reportWebVitals.js","index.js"],"names":["Login","props","setLoggedIn","setWebId","session","a","handleIncomingRedirect","getDefaultSession","info","isLoggedIn","webId","handleRedirectAfterLogin","className","Button","size","variant","color","onClick","login","oidcIssuer","redirectUrl","window","location","href","clientName","GridView","files","openLink","useState","folderImages","setFolderImages","isFolder","url","endsWith","isImage","getName","match","console","log","length","processedUrls","entry","processedEntry","shortName","isFolderBoolean","imageUrl","push","getFile","fetch","raw","URL","createObjectURL","renderEntry","folderEntry","xmlns","fill","class","viewBox","d","src","alt","useEffect","fetchSomeData","ImageList","cols","map","index","ImageListItem","ImageListItemBar","title","tempPodPattern","getPODUrlFromWebId","FileExplorer","MY_POD_URL","setFiles","setLoading","currentPath","explorerPath","setCurrentPath","setExplorerPath","openFolder","myUrl","getFilesFromResourceURL","then","fileArray","getSolidDataset","fetchedFiles","getThingAll","children","res","slice","Container","Box","id","lastSlashPos","lastIndexOf","alert","FileUpload","selectedFiles","setSelectedFiles","placeFileInContainer","file","targetContainerURL","saveFileInContainer","slug","name","contentType","type","error","selectedFilesToReact","document","querySelector","click","multiple","onChange","e","target","useStyles","makeStyles","fab","position","right","bottom","HamburgerMenu","marginLeft","MenuBar","history","classes","AppBar","Toolbar","goBack","IconButton","edge","Home","useRouteMatch","anchorEl","setAnchorEl","handleClose","Fab","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","replace","App","loggedIn","useHistory","path","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b7d586f6.chunk.js","sourcesContent":["\nimport \"./Login.css\"\nimport React from \"react\";\n\nimport {Button} from '@material-ui/core';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n  login,\n  handleIncomingRedirect,\n  getDefaultSession,\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction Login(props) {\n\tlet setLoggedIn = props.setLoggedIn;\n\tlet setWebId = props.setWebId;\n\n\tlet session = null;\n\n\t// 1a. Start Login Process. Call login() function.\n\tfunction loginToInruptDotCom() {\n\t  let chosenIssuer = \"https://broker.pod.inrupt.com\";\n\t  return login({\n\t    oidcIssuer: chosenIssuer,\n\t    redirectUrl: window.location.href,\n\t    clientName: \"Getting started app\"\n\t  });\n\t}\n\n\t// 1b. Login Redirect. Call handleIncomingRedirect() function.\n\t// When redirected after login, finish the process by retrieving session information.\n\tasync function handleRedirectAfterLogin() {\n\t  await handleIncomingRedirect();\n\n\t  session = getDefaultSession();\n\n\t  if (session.info.isLoggedIn) {\n\t    // Update the page with the status.\n\t    setLoggedIn(true);\n\t    setWebId(session.info.webId);\n\t  }\n\t}\n\n\thandleRedirectAfterLogin();\n\n\treturn (\n\t\t<div className=\"login-frame\">\n\t    \t<Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={loginToInruptDotCom}>Log-in</Button>\n    \t</div>\n\t);\n}\n\n\nexport default Login;","import React, {useEffect, useState} from \"react\";\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n    fetch\n  } from '@inrupt/solid-client-authn-browser';\n\n  // Import from \"@inrupt/solid-client\"\nimport {\n    getFile,\n  } from '@inrupt/solid-client';\n\n// import {Shape, Card, Row, Col, CardGroup, Image, Container} from 'react-bootstrap';\n\nimport {Container,\nBox,\nImageList,\nImageListItem,\nImageListItemBar,\nIconButton} from '@material-ui/core';\n\n\nimport InfoIcon from '@material-ui/icons/Info';\n\nimport \"./GridView.css\";\n\n\nfunction GridView(props){\n    let files = props.files;\n    let folderIcons = [];\n    let openLink = props.openLink;\n    const [folderImages, setFolderImages] = useState([]);\n\n\n\n    function isFolder(url){\n        return url.endsWith(\"/\");\n    }\n\n    function isImage(url){\n        let imageBoolean = url.endsWith(\".jpg\") || url.endsWith(\".jpeg\") || url.endsWith(\".png\");\n        return imageBoolean;\n    }\n\n    function getName(url){\n        let regex = /^https:\\/\\/pod\\.inrupt\\.com(\\/\\w+)*\\/(\\w+)/;\n        const match = url.match(regex);\n        console.log(match);\n        return match[match.length - 1];\n    }\n\n    async function fetchSomeData(files) {\n        console.log(\"Fetching\");\n        console.log(files);\n        let processedUrls = [];\n    \n        for (const entry of files) {\n          console.log(entry);\n          let processedEntry = {\n            url: entry.url,\n            shortName: getName(entry.url),\n            isFolderBoolean: isFolder(entry.url),\n            imageUrl: null,\n          };\n          processedUrls.push(processedEntry);\n    \n          if (isImage(processedEntry.url)) {\n            let raw = await getFile(processedEntry.url, { fetch: fetch });\n            let imageUrl = URL.createObjectURL(raw);\n            processedEntry.imageUrl = imageUrl;\n          }\n        }\n        setFolderImages(processedUrls);\n      }\n\n      useEffect(() => {\n        fetchSomeData(props.files)\n      }, [props.files]);\n    \n\n\n    function renderEntry(folderEntry){\n        let result = null;\n\n        console.log(\"imageUrl: \" + folderEntry.imageUrl);\n\n        if(folderEntry.isFolderBoolean || !isImage(folderEntry.url)){\n            result = <p onClick={() => openLink(folderEntry.url)}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\"  fill=\"currentColor\" class=\"bi bi-folder\" viewBox=\"0 0 16 16\">\n                <path d=\"M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z\"/>\n            </svg></p>\n        } else if(folderEntry.imageUrl){\n            result = <img src={folderEntry.imageUrl} alt={folderEntry.imageUrl}/>\n            \n        } else {\n            result =\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" class=\"bi bi-card-image\" viewBox=\"0 0 16 16\">\n                <path d=\"M6.002 5.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"/>\n                <path d=\"M1.5 2A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13zm13 1a.5.5 0 0 1 .5.5v6l-3.775-1.947a.5.5 0 0 0-.577.093l-3.71 3.71-2.66-1.772a.5.5 0 0 0-.63.062L1.002 12v.54A.505.505 0 0 1 1 12.5v-9a.5.5 0 0 1 .5-.5h13z\"/>\n            </svg>\n\n        }\n        return result;\n    }\n\n    return(\n        <div className=\"grid-view\">\n            <ImageList cols={2}>\n                {folderImages.map((folderEntry, index) => (\n                    <ImageListItem key={index}>\n                        {renderEntry(folderEntry)}\n                        <ImageListItemBar\n                            title={folderEntry.shortName}\n                            // subtitle={<span>url: {folderEntry.url}</span>}\n                            // actionIcon={\n                            // <IconButton aria-label={`info about ${folderEntry.shortName}`}>\n                            //     <InfoIcon/>\n                            // </IconButton>\n                            // }\n                        />\n                    </ImageListItem>\n                ))}\n            </ImageList>\n        </div>  \n    );\n}\n\n\nexport default GridView;","\n\nconst solidwebPattern = \"https:\\/\\/(\\w+\\.)solidweb.org\\/\";\nconst podInruptPattern = \"https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\/\";\nconst tempPodPattern = /https:\\/\\/(\\w+\\.)solidweb.org\\/|https:\\/\\/pod\\.inrupt\\.com\\/\\w+\\//;\n\nfunction getPODUrlFromWebId(webId) \n{\n    return webId.match(tempPodPattern)[0];\n}\n\nexport {getPODUrlFromWebId};\nexport default getPODUrlFromWebId;","import React, {useState} from \"react\";\nimport GridView from \"./GridView\";\n\n\n\nimport \"./FileExplorer.css\"\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {fetch} from '@inrupt/solid-client-authn-browser';\n\n// Import from \"@inrupt/solid-client\"\nimport {getSolidDataset, getThingAll} from '@inrupt/solid-client';\n\nimport {getPODUrlFromWebId} from './pod';\n\nimport {Container, Box} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\n\nfunction FileExplorer(props) {\n    let webId = props.webId;\n    const MY_POD_URL = getPODUrlFromWebId(webId);\n\n    let [files, setFiles] = useState([]);\n    let [loading, setLoading] = useState(false);\n\n    let currentPath = props.explorerPath;\n    let setCurrentPath = props.setExplorerPath;\n\n    if (currentPath === \"\")\n    {\n        setCurrentPath(MY_POD_URL);\n    }\n\n    function openFolder(myUrl)\n    {\n        setLoading(true);\n        // its important to set the current path first !!\n        getFilesFromResourceURL(myUrl).then((fileArray) => {\n            setCurrentPath(myUrl);\n            setFiles(fileArray);\n            setLoading(false);\n        });\n    }\n\n\n    function fileExplorerGoBack() \n    {\n        if (currentPath.length > MY_POD_URL.length && currentPath !== MY_POD_URL) \n        {\n            // find the second-last '/', then keep the substring until that '/'\n            // this gives the new path url\n            let lastSlashPos = currentPath.slice(0, -1).lastIndexOf('/');\n            let newPath = currentPath.slice(0, lastSlashPos + 1)\n\n            openFolder(newPath);\n           \n        } \n        else \n        {\n            alert(\"Cannot go back from POD root.\");\n        }\n    }\n\n\n    function resourceLink(itemURL, setCurrentPath, uniqueKey) {\n        let url = itemURL;\n        let resourceName = stripURL(url);\n\n        function open() \n        {\n            if (url.endsWith(\"/\")) \n            {\n                console.log(\"opening \" + url + \" ...\");\n                openFolder(url);\n            } \n            else \n            {\n                alert(\"this is a file, handle it\");\n            }\n        }\n\n       return {\"pathName\": {url}, \"open\": {open}};\n    }\n\n    /** Iteraetes on the file urls and returns an array of react components */\n    function stripURL(url) {\n        //Find the second-last '/', then keep the substring until that '/'\n        // this gives the new path url\n        let searchUpperBound = url.length;\n        if (url.endsWith('/')) {\n            searchUpperBound = url.length - 1\n        }\n        let slashPos = url.slice(0, searchUpperBound).lastIndexOf('/');\n        return url.slice(slashPos + 1, searchUpperBound);\n    }\n\n\n    function openLink(url)\n    {\n        // its important to set the current path first !!\n        getFilesFromResourceURL(url).then((fileArray) => {\n            setCurrentPath(url);\n            setFiles(fileArray);\n        });\n    }\n\n\n    /** Iterates on the file urls and returns an array of react components\n     * in the form of resourceLink elements  */\n    function fileArrayToReact() {\n        if (loading)\n        {\n            return <div className=\"loader\"></div> \n        }\n\n        // the first child element is self\n        if (files.length > 0) {\n            let reactElems = [];\n            let i = 0;\n\n            for (let item of files) {\n                reactElems.push(resourceLink(item.url, setCurrentPath, i));\n                i++;\n            }\n\n            return reactElems;\n        }\n\n        return <p><i>Nothing to display</i></p>;\n    }\n\n    async function getFilesFromResourceURL(url) {\n        const fetchedFiles = await getSolidDataset(url, {fetch: fetch});\n\n        let children = await getThingAll(fetchedFiles);\n\n        let res = []\n\n        // note: the first child element is self\n        if (children.length > 1) {\n            res = children.slice(1, children.length)\n        }\n\n        return res;\n    }\n\n    /** Fetch all files from the given path given relative to the root */\n    function getRootFiles() {\n        getFilesFromResourceURL(MY_POD_URL).then((fileArray) => {\n            setCurrentPath(MY_POD_URL);\n            setFiles(fileArray);\n        });\n    }\n\n\n    // only read files if not already in the array (avoid infinite refreshes !!!)\n    // but also if the current path is the root (it's possible that we're not in the\n    // root but the current path contains no file e.g. empty folder)\n    if ((files.length === 0) && (currentPath === MY_POD_URL)) \n    {\n        // Don't use animation here as FileExplorer might already\n        // be rendering and updating too many properties\n        // at that time might cause 'too many rerenders'\n        getRootFiles();\n    }\n\n\n    return (\n        <Container>\n            <Box>\n                <div id=\"file-explorer\">\n                    <button className=\"Button\" id=\"go-back\" onClick={fileExplorerGoBack}>Go back</button>\n                    <p>Files for current path ({currentPath}):</p>\n                </div>\n            </Box>\n            <GridView files={files} openLink={openLink}/>\n        </Container>\n    );\n}\n\nexport default FileExplorer;","import React, {useState} from \"react\"\n\n// Import from \"@inrupt/solid-client\"\nimport {\n    saveFileInContainer,\n    getSourceUrl\n} from '@inrupt/solid-client';\n\n// Import from \"@inrupt/solid-client-authn-browser\"\nimport {\n    fetch\n} from '@inrupt/solid-client-authn-browser';\n\n\nfunction FileUpload(props) {\n    let currentPath = props.explorerPath;\n    let [selectedFiles, setSelectedFiles] = useState([]);\n\n\n    function upload() {\n        for (let file of selectedFiles) {\n            placeFileInContainer(file, currentPath);\n        }\n        //TODO: add success/failure notification of uploading file(s)\n    }\n\n    /**\n     * Upload file into the targetContainer.\n     * @param  {[type]} file               [description]\n     * @param  {[type]} targetContainerURL [description]\n     * @return {[type]}                    [description]\n     */\n    async function placeFileInContainer(file, targetContainerURL) {\n        try {\n            const savedFile = await saveFileInContainer(\n                targetContainerURL,           // Container URL\n                file,                         // File\n                {\n                    slug: file.name, // file.name.split('.')[0]\n                    contentType: file.type, fetch: fetch\n                }\n            );\n        } catch (error) {\n            console.error(error);\n            alert(\"file '\" + file.name + \"' already exists.\");\n        }\n    }\n\n    function openFileSelectionWindow() {\n        document.querySelector(\"#file-input\").click();\n    }\n\n\n    function selectedFilesToReact() {\n        let res = [];\n\n        // selectedFiles is iterable but not an array, \n        // so map() and forEach() functions don't work\n        for (let file of selectedFiles) {\n            res.push(<li>{file.name}</li>);\n        }\n\n        return res;\n    }\n\n    function showSelectedFiles() {\n        return (\n            <div className=\"SelectedFilesDiv\">\n                <p>Selected files:</p>\n                <ul>{selectedFilesToReact()}</ul>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h1>Upload files</h1>\n            <p>Current path: {currentPath}</p>\n            <button className=\"Button\" onClick={openFileSelectionWindow}>Add file(s)</button>\n            {showSelectedFiles()}\n            <button className=\"Button\" onClick={upload}>Upload</button>\n            <input id=\"file-input\" type=\"file\" multiple=\"multiple\"\n                name=\"fileUploadInput\"\n                className=\"file-selection\"\n                onChange={(e) => {\n                       setSelectedFiles(e.target.files);\n                }}/>\n        </div>\n    );\n}\n\nexport default FileUpload;\n","import './App.css';\nimport Login from \"./Login\";\nimport FileExplorer from \"./FileExplorer\";\nimport FileUpload from \"./FileUpload\";\nimport React, {useState} from \"react\";\nimport {AppBar, Toolbar, Button, Typography} from '@material-ui/core';\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {Menu, MenuItem, Fab} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport {\n  // Import Router and not BrowserRouter, otherwise history.push()\n  // will update the url displayed in the browser but will not re-render afterwards\n  Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useHistory,\n  useRouteMatch\n} from \"react-router-dom\";\n\n\n\n// Style I want for fab, can add more - it's just a JS object\nconst useStyles = makeStyles({\n  fab: {\n    position: \"fixed\",\n    right: \"10px\",\n    bottom: \"10px\",\n  },\n  HamburgerMenu: {\n    marginLeft: 'auto',\n  }\n});\n\n\nfunction App() {\n    let [loggedIn, setLoggedIn] = useState(false);\n    let [webId, setWebId] = useState(\"\");\n    let [explorerPath, setExplorerPath] = useState(\"\");\n    let history = useHistory();\n    const classes = useStyles();\n\n    function isLoggedIn()\n    {\n        return (webId !== \"\") && loggedIn;\n    }\n\n    return (\n    <div className=\"app-div\">\n        <Switch>\n            <Route path=\"/login\">\n                <Login setWebId={setWebId} setLoggedIn={setLoggedIn}/>\n                {/* We execute this separately and after the login, this allows\n                an automatic redirect to '/home' when we come back from login form. */}\n                {isLoggedIn() ? <Redirect to=\"/\"/> : null} \n            </Route>\n            <Route path=\"/home/upload\">\n                {isLoggedIn() ? <div><MenuBar classes={classes} history={history}/>\n                    <FileUpload explorerPath={explorerPath}/></div> : <Redirect to={\"/\"} />\n                }\n            </Route>\n            <Route path=\"/home\">\n                <MenuBar classes={classes} history={history}/>\n                {isLoggedIn() ? <Home classes={classes} webId={webId}\n                history={history}\n                explorerPath={explorerPath}\n                setExplorerPath={setExplorerPath}/> : <Redirect to=\"/\"/>}\n            </Route>\n            <Route path=\"/\">\n                {isLoggedIn() ? <Redirect push to=\"/home\"/> : <Redirect push to=\"/login\"/>}\n            </Route>\n        </Switch>\n    </div>\n    );\n}\n\n\nfunction MenuBar(props)\n{\n    let history = props.history;\n    let classes = props.classes;\n\n    return(\n        <AppBar position=\"static\">\n            <Toolbar>\n                <ArrowBackIcon color=\"inherit\" onClick={() => history.goBack()}/>\n                {/*<Button variant=\"contained\" color=\"secondary\" onClick={() => history.goBack()}>\n                    Go Back\n                </Button>*/}\n                <IconButton className={classes.HamburgerMenu} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon/>\n                </IconButton>\n                {/*<Typography variant=\"h6\">\n                    WePOD\n                </Typography>*/}\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nfunction Home(props)\n{\n    let webId = props.webId;\n    let match = useRouteMatch();\n    const classes = props.classes;\n\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    function gotoFileUpload()\n    {\n        console.log(\"goto file upload screen ...\");\n        props.history.replace(`${match.url}/upload`);\n    }\n\n    return (\n        <div>\n            <h1>Home</h1>\n            {/*<h3>webID: {webId}</h3>*/}\n            <FileExplorer webId={webId} explorerPath={props.explorerPath}\n            setExplorerPath={props.setExplorerPath}/>\n            <Fab className={classes.fab} color=\"primary\" \n            aria-label=\"add\" aria-controls=\"simple-menu\"\n            onClick={handleClick} aria-haspopup=\"true\">\n              <AddIcon/>\n            </Fab>\n            <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n            >\n                <MenuItem onClick={gotoFileUpload}>Upload files</MenuItem>\n                <MenuItem onClick={handleClose}>New folder</MenuItem>\n            </Menu>\n        </div>\n    );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        {/*basename={process.env.PUBLIC_URL}*/}\n        <HashRouter> \n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}